
compy2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f4  080035f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035f4  080035f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f4  080035f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  0800366c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800366c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b174  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a51  00000000  00000000  0002b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002cc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5b0  00000000  00000000  0002df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3f8  00000000  00000000  00048508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ab9  00000000  00000000  00054900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb3b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000eb40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003530 	.word	0x08003530

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003530 	.word	0x08003530

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc10 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81c 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f964 	bl	80004f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f932 	bl	8000498 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000234:	f000 f870 	bl	8000318 <MX_ADC_Init>
  MX_SPI1_Init();
 8000238:	f000 f8f0 	bl	800041c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  printf("Hi1\n");
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <main+0x38>)
 800023e:	0018      	movs	r0, r3
 8000240:	f002 fc9e 	bl	8002b80 <puts>
  printf("Hi2\n");
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x3c>)
 8000246:	0018      	movs	r0, r3
 8000248:	f002 fc9a 	bl	8002b80 <puts>
  printf("Hi3\n");
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <main+0x40>)
 800024e:	0018      	movs	r0, r3
 8000250:	f002 fc96 	bl	8002b80 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	e7fe      	b.n	8000254 <main+0x34>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	08003548 	.word	0x08003548
 800025c:	0800354c 	.word	0x0800354c
 8000260:	08003550 	.word	0x08003550

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b099      	sub	sp, #100	; 0x64
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	242c      	movs	r4, #44	; 0x2c
 800026c:	193b      	adds	r3, r7, r4
 800026e:	0018      	movs	r0, r3
 8000270:	2334      	movs	r3, #52	; 0x34
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f002 fc09 	bl	8002a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027a:	231c      	movs	r3, #28
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	0018      	movs	r0, r3
 8000280:	2310      	movs	r3, #16
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f002 fc01 	bl	8002a8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028a:	003b      	movs	r3, r7
 800028c:	0018      	movs	r0, r3
 800028e:	231c      	movs	r3, #28
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f002 fbfa 	bl	8002a8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8000298:	0021      	movs	r1, r4
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2230      	movs	r2, #48	; 0x30
 800029e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2201      	movs	r2, #1
 80002a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2201      	movs	r2, #1
 80002aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2210      	movs	r2, #16
 80002b0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2200      	movs	r2, #0
 80002b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 f8c0 	bl	8001440 <HAL_RCC_OscConfig>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002c4:	f000 f9ae 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	211c      	movs	r1, #28
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2207      	movs	r2, #7
 80002ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2203      	movs	r2, #3
 80002d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2101      	movs	r1, #1
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 fc30 	bl	8001b4c <HAL_RCC_ClockConfig>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002f0:	f000 f998 	bl	8000624 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2202      	movs	r2, #2
 80002f8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002fa:	003b      	movs	r3, r7
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	003b      	movs	r3, r7
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fd9c 	bl	8001e40 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800030c:	f000 f98a 	bl	8000624 <Error_Handler>
  }
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b019      	add	sp, #100	; 0x64
 8000316:	bd90      	pop	{r4, r7, pc}

08000318 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	0018      	movs	r0, r3
 8000322:	230c      	movs	r3, #12
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 fbb0 	bl	8002a8c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800032c:	4b39      	ldr	r3, [pc, #228]	; (8000414 <MX_ADC_Init+0xfc>)
 800032e:	4a3a      	ldr	r2, [pc, #232]	; (8000418 <MX_ADC_Init+0x100>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000332:	4b38      	ldr	r3, [pc, #224]	; (8000414 <MX_ADC_Init+0xfc>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000338:	4b36      	ldr	r3, [pc, #216]	; (8000414 <MX_ADC_Init+0xfc>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <MX_ADC_Init+0xfc>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000344:	4b33      	ldr	r3, [pc, #204]	; (8000414 <MX_ADC_Init+0xfc>)
 8000346:	2201      	movs	r2, #1
 8000348:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800034a:	4b32      	ldr	r3, [pc, #200]	; (8000414 <MX_ADC_Init+0xfc>)
 800034c:	2204      	movs	r2, #4
 800034e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000350:	4b30      	ldr	r3, [pc, #192]	; (8000414 <MX_ADC_Init+0xfc>)
 8000352:	2200      	movs	r2, #0
 8000354:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <MX_ADC_Init+0xfc>)
 8000358:	2200      	movs	r2, #0
 800035a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800035c:	4b2d      	ldr	r3, [pc, #180]	; (8000414 <MX_ADC_Init+0xfc>)
 800035e:	2200      	movs	r2, #0
 8000360:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <MX_ADC_Init+0xfc>)
 8000364:	2200      	movs	r2, #0
 8000366:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000368:	4b2a      	ldr	r3, [pc, #168]	; (8000414 <MX_ADC_Init+0xfc>)
 800036a:	22c2      	movs	r2, #194	; 0xc2
 800036c:	32ff      	adds	r2, #255	; 0xff
 800036e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <MX_ADC_Init+0xfc>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <MX_ADC_Init+0xfc>)
 8000378:	2224      	movs	r2, #36	; 0x24
 800037a:	2100      	movs	r1, #0
 800037c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800037e:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_ADC_Init+0xfc>)
 8000380:	2201      	movs	r2, #1
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_ADC_Init+0xfc>)
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fbc2 	bl	8000b10 <HAL_ADC_Init>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000390:	f000 f948 	bl	8000624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	0152      	lsls	r2, r2, #5
 80003a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	0552      	lsls	r2, r2, #21
 80003a8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003aa:	1d3a      	adds	r2, r7, #4
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <MX_ADC_Init+0xfc>)
 80003ae:	0011      	movs	r1, r2
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fced 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003ba:	f000 f933 	bl	8000624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003c4:	1d3a      	adds	r2, r7, #4
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_ADC_Init+0xfc>)
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fce0 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80003d4:	f000 f926 	bl	8000624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2204      	movs	r2, #4
 80003dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003de:	1d3a      	adds	r2, r7, #4
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_ADC_Init+0xfc>)
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fcd3 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80003ee:	f000 f919 	bl	8000624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2206      	movs	r2, #6
 80003f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f8:	1d3a      	adds	r2, r7, #4
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_ADC_Init+0xfc>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fcc6 	bl	8000d90 <HAL_ADC_ConfigChannel>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000408:	f000 f90c 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000008c 	.word	0x2000008c
 8000418:	40012400 	.word	0x40012400

0800041c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_SPI1_Init+0x74>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <MX_SPI1_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_SPI1_Init+0x74>)
 8000428:	2282      	movs	r2, #130	; 0x82
 800042a:	0052      	lsls	r2, r2, #1
 800042c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_SPI1_Init+0x74>)
 8000436:	22e0      	movs	r2, #224	; 0xe0
 8000438:	00d2      	lsls	r2, r2, #3
 800043a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_SPI1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_SPI1_Init+0x74>)
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	02d2      	lsls	r2, r2, #11
 800044e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_SPI1_Init+0x74>)
 8000452:	2210      	movs	r2, #16
 8000454:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_SPI1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_SPI1_Init+0x74>)
 800046a:	2207      	movs	r2, #7
 800046c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_SPI1_Init+0x74>)
 8000476:	2208      	movs	r2, #8
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_SPI1_Init+0x74>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fddd 	bl	800203c <HAL_SPI_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 f8cd 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000cc 	.word	0x200000cc
 8000494:	40013000 	.word	0x40013000

08000498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <MX_USART2_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004a4:	22e1      	movs	r2, #225	; 0xe1
 80004a6:	0252      	lsls	r2, r2, #9
 80004a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fe65 	bl	80021ac <HAL_UART_Init>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e6:	f000 f89d 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000130 	.word	0x20000130
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b08b      	sub	sp, #44	; 0x2c
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	2414      	movs	r4, #20
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fabf 	bl	8002a8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0309      	lsls	r1, r1, #12
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	031b      	lsls	r3, r3, #12
 8000524:	4013      	ands	r3, r2
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	03c9      	lsls	r1, r1, #15
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	03db      	lsls	r3, r3, #15
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0289      	lsls	r1, r1, #10
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	029b      	lsls	r3, r3, #10
 800055c:	4013      	ands	r3, r2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	02c9      	lsls	r1, r1, #11
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	02db      	lsls	r3, r3, #11
 8000578:	4013      	ands	r3, r2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057e:	2390      	movs	r3, #144	; 0x90
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	0018      	movs	r0, r3
 8000588:	f000 ff3c 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	0192      	lsls	r2, r2, #6
 8000592:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2284      	movs	r2, #132	; 0x84
 8000598:	0392      	lsls	r2, r2, #14
 800059a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	4a0f      	ldr	r2, [pc, #60]	; (80005e4 <MX_GPIO_Init+0xec>)
 80005a6:	0019      	movs	r1, r3
 80005a8:	0010      	movs	r0, r2
 80005aa:	f000 fdb3 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2220      	movs	r2, #32
 80005b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c8:	187a      	adds	r2, r7, r1
 80005ca:	2390      	movs	r3, #144	; 0x90
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	0011      	movs	r1, r2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fd9f 	bl	8001114 <HAL_GPIO_Init>

}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b00b      	add	sp, #44	; 0x2c
 80005dc:	bd90      	pop	{r4, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000800 	.word	0x48000800

080005e8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <__io_putchar+0x30>)
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <__io_putchar+0x34>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	f001 fe2c 	bl	8002254 <HAL_UART_Transmit>
  if (ch=='\n')
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d105      	bne.n	800060e <__io_putchar+0x26>
  {
	  HAL_UART_Transmit(&huart2, "\r", 1, 0xFFFF);
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <__io_putchar+0x30>)
 8000604:	4906      	ldr	r1, [pc, #24]	; (8000620 <__io_putchar+0x38>)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <__io_putchar+0x34>)
 8000608:	2201      	movs	r2, #1
 800060a:	f001 fe23 	bl	8002254 <HAL_UART_Transmit>
  }


  return ch;
 800060e:	687b      	ldr	r3, [r7, #4]
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	0000ffff 	.word	0x0000ffff
 800061c:	20000130 	.word	0x20000130
 8000620:	08003554 	.word	0x08003554

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x44>)
 8000638:	699a      	ldr	r2, [r3, #24]
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_MspInit+0x44>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	619a      	str	r2, [r3, #24]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x44>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x44>)
 8000650:	69da      	ldr	r2, [r3, #28]
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_MspInit+0x44>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0549      	lsls	r1, r1, #21
 8000658:	430a      	orrs	r2, r1
 800065a:	61da      	str	r2, [r3, #28]
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_MspInit+0x44>)
 800065e:	69da      	ldr	r2, [r3, #28]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	055b      	lsls	r3, r3, #21
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08b      	sub	sp, #44	; 0x2c
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	2414      	movs	r4, #20
 8000682:	193b      	adds	r3, r7, r4
 8000684:	0018      	movs	r0, r3
 8000686:	2314      	movs	r3, #20
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f002 f9fe 	bl	8002a8c <memset>
  if(hadc->Instance==ADC1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <HAL_ADC_MspInit+0x84>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d12b      	bne.n	80006f2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <HAL_ADC_MspInit+0x88>)
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_ADC_MspInit+0x88>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	0089      	lsls	r1, r1, #2
 80006a4:	430a      	orrs	r2, r1
 80006a6:	619a      	str	r2, [r3, #24]
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_ADC_MspInit+0x88>)
 80006aa:	699a      	ldr	r2, [r3, #24]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4013      	ands	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_ADC_MspInit+0x88>)
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_ADC_MspInit+0x88>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0289      	lsls	r1, r1, #10
 80006c0:	430a      	orrs	r2, r1
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_ADC_MspInit+0x88>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	029b      	lsls	r3, r3, #10
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2253      	movs	r2, #83	; 0x53
 80006d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2203      	movs	r2, #3
 80006dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	193a      	adds	r2, r7, r4
 80006e6:	2390      	movs	r3, #144	; 0x90
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fd11 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b00b      	add	sp, #44	; 0x2c
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40012400 	.word	0x40012400
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b08b      	sub	sp, #44	; 0x2c
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	2414      	movs	r4, #20
 800070e:	193b      	adds	r3, r7, r4
 8000710:	0018      	movs	r0, r3
 8000712:	2314      	movs	r3, #20
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f002 f9b8 	bl	8002a8c <memset>
  if(hspi->Instance==SPI1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <HAL_SPI_MspInit+0xd8>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d155      	bne.n	80007d2 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0149      	lsls	r1, r1, #5
 8000730:	430a      	orrs	r2, r1
 8000732:	619a      	str	r2, [r3, #24]
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	015b      	lsls	r3, r3, #5
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0289      	lsls	r1, r1, #10
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	029b      	lsls	r3, r3, #10
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	02c9      	lsls	r1, r1, #11
 8000768:	430a      	orrs	r2, r1
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <HAL_SPI_MspInit+0xdc>)
 800076e:	695a      	ldr	r2, [r3, #20]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	02db      	lsls	r3, r3, #11
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HAL_SPI_MspInit+0xe0>)
 800077e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2202      	movs	r2, #2
 8000784:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2203      	movs	r2, #3
 8000790:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	193a      	adds	r2, r7, r4
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fcb7 	bl	8001114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2208      	movs	r2, #8
 80007ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2202      	movs	r2, #2
 80007b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2203      	movs	r2, #3
 80007be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_SPI_MspInit+0xe4>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f000 fca1 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b00b      	add	sp, #44	; 0x2c
 80007d8:	bd90      	pop	{r4, r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40021000 	.word	0x40021000
 80007e4:	00008080 	.word	0x00008080
 80007e8:	48000400 	.word	0x48000400

080007ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b08b      	sub	sp, #44	; 0x2c
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	2414      	movs	r4, #20
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	0018      	movs	r0, r3
 80007fa:	2314      	movs	r3, #20
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f002 f944 	bl	8002a8c <memset>
  if(huart->Instance==USART2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1c      	ldr	r2, [pc, #112]	; (800087c <HAL_UART_MspInit+0x90>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d132      	bne.n	8000874 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_UART_MspInit+0x94>)
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_MspInit+0x94>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0289      	lsls	r1, r1, #10
 8000818:	430a      	orrs	r2, r1
 800081a:	61da      	str	r2, [r3, #28]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_UART_MspInit+0x94>)
 800081e:	69da      	ldr	r2, [r3, #28]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_UART_MspInit+0x94>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_UART_MspInit+0x94>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0289      	lsls	r1, r1, #10
 8000834:	430a      	orrs	r2, r1
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_UART_MspInit+0x94>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	029b      	lsls	r3, r3, #10
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000846:	0021      	movs	r1, r4
 8000848:	187b      	adds	r3, r7, r1
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2202      	movs	r2, #2
 8000852:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2201      	movs	r2, #1
 8000864:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	187a      	adds	r2, r7, r1
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fc50 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b00b      	add	sp, #44	; 0x2c
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40004400 	.word	0x40004400
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f916 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e00a      	b.n	80008da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008c4:	e000      	b.n	80008c8 <_read+0x16>
 80008c6:	bf00      	nop
 80008c8:	0001      	movs	r1, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	60ba      	str	r2, [r7, #8]
 80008d0:	b2ca      	uxtb	r2, r1
 80008d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	dbf0      	blt.n	80008c4 <_read+0x12>
  }

  return len;
 80008e2:	687b      	ldr	r3, [r7, #4]
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b006      	add	sp, #24
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e009      	b.n	8000912 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	60ba      	str	r2, [r7, #8]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fe6e 	bl	80005e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	3301      	adds	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	429a      	cmp	r2, r3
 8000918:	dbf1      	blt.n	80008fe <_write+0x12>
  }
  return len;
 800091a:	687b      	ldr	r3, [r7, #4]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b006      	add	sp, #24
 8000922:	bd80      	pop	{r7, pc}

08000924 <_close>:

int _close(int file)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800092c:	2301      	movs	r3, #1
 800092e:	425b      	negs	r3, r3
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}

08000938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	0192      	lsls	r2, r2, #6
 8000948:	605a      	str	r2, [r3, #4]
  return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <_isatty>:

int _isatty(int file)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095c:	2301      	movs	r3, #1
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f002 f844 	bl	8002a38 <__errno>
 80009b0:	0003      	movs	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	425b      	negs	r3, r3
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	18d2      	adds	r2, r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <_sbrk+0x64>)
 80009cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b006      	add	sp, #24
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20004000 	.word	0x20004000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	200001b4 	.word	0x200001b4
 80009e4:	200001d0 	.word	0x200001d0

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0b      	ldr	r4, [pc, #44]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a1e:	f7ff ffe3 	bl	80009e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a22:	f002 f80f 	bl	8002a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff fbfb 	bl	8000220 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a38:	080035fc 	.word	0x080035fc
  ldr r2, =_sbss
 8000a3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a40:	200001cc 	.word	0x200001cc

08000a44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_COMP_IRQHandler>
	...

08000a48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_Init+0x24>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_Init+0x24>)
 8000a52:	2110      	movs	r1, #16
 8000a54:	430a      	orrs	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f809 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5e:	f7ff fde7 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_InitTick+0x5c>)
 8000a7a:	681c      	ldr	r4, [r3, #0]
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_InitTick+0x60>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	0019      	movs	r1, r3
 8000a82:	23fa      	movs	r3, #250	; 0xfa
 8000a84:	0098      	lsls	r0, r3, #2
 8000a86:	f7ff fb3f 	bl	8000108 <__udivsi3>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	0020      	movs	r0, r4
 8000a90:	f7ff fb3a 	bl	8000108 <__udivsi3>
 8000a94:	0003      	movs	r3, r0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fb2f 	bl	80010fa <HAL_SYSTICK_Config>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e00f      	b.n	8000ac4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d80b      	bhi.n	8000ac2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2301      	movs	r3, #1
 8000aae:	425b      	negs	r3, r3
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fb0c 	bl	80010d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_InitTick+0x64>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	18d2      	adds	r2, r2, r3
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_IncTick+0x20>)
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200001b8 	.word	0x200001b8

08000afc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	200001b8 	.word	0x200001b8

08000b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e125      	b.n	8000d7a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10a      	bne.n	8000b4c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2234      	movs	r2, #52	; 0x34
 8000b40:	2100      	movs	r1, #0
 8000b42:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fd96 	bl	8000678 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b50:	2210      	movs	r2, #16
 8000b52:	4013      	ands	r3, r2
 8000b54:	d000      	beq.n	8000b58 <HAL_ADC_Init+0x48>
 8000b56:	e103      	b.n	8000d60 <HAL_ADC_Init+0x250>
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d000      	beq.n	8000b64 <HAL_ADC_Init+0x54>
 8000b62:	e0fd      	b.n	8000d60 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b6e:	d000      	beq.n	8000b72 <HAL_ADC_Init+0x62>
 8000b70:	e0f6      	b.n	8000d60 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b76:	4a83      	ldr	r2, [pc, #524]	; (8000d84 <HAL_ADC_Init+0x274>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d112      	bne.n	8000bb6 <HAL_ADC_Init+0xa6>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d009      	beq.n	8000bb2 <HAL_ADC_Init+0xa2>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	401a      	ands	r2, r3
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d101      	bne.n	8000bb6 <HAL_ADC_Init+0xa6>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_ADC_Init+0xa8>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d116      	bne.n	8000bea <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	2218      	movs	r2, #24
 8000bc4:	4393      	bics	r3, r2
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	0899      	lsrs	r1, r3, #2
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4964      	ldr	r1, [pc, #400]	; (8000d88 <HAL_ADC_Init+0x278>)
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7e1b      	ldrb	r3, [r3, #24]
 8000bfe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7e5b      	ldrb	r3, [r3, #25]
 8000c04:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c06:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e9b      	ldrb	r3, [r3, #26]
 8000c0c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d002      	beq.n	8000c1e <HAL_ADC_Init+0x10e>
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	015b      	lsls	r3, r3, #5
 8000c1c:	e000      	b.n	8000c20 <HAL_ADC_Init+0x110>
 8000c1e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c20:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c26:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d101      	bne.n	8000c34 <HAL_ADC_Init+0x124>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e000      	b.n	8000c36 <HAL_ADC_Init+0x126>
 8000c34:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c36:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2124      	movs	r1, #36	; 0x24
 8000c3c:	5c5b      	ldrb	r3, [r3, r1]
 8000c3e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c40:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7edb      	ldrb	r3, [r3, #27]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d115      	bne.n	8000c7c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7e9b      	ldrb	r3, [r3, #26]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d105      	bne.n	8000c64 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	0252      	lsls	r2, r2, #9
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	e00b      	b.n	8000c7c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c68:	2220      	movs	r2, #32
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c74:	2201      	movs	r2, #1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69da      	ldr	r2, [r3, #28]
 8000c80:	23c2      	movs	r3, #194	; 0xc2
 8000c82:	33ff      	adds	r3, #255	; 0xff
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d007      	beq.n	8000c98 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c90:	4313      	orrs	r3, r2
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68d9      	ldr	r1, [r3, #12]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	055b      	lsls	r3, r3, #21
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d01b      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d017      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d013      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d00f      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d00b      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	2b05      	cmp	r3, #5
 8000cda:	d007      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d003      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	2b07      	cmp	r3, #7
 8000cea:	d112      	bne.n	8000d12 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	695a      	ldr	r2, [r3, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2107      	movs	r1, #7
 8000cf8:	438a      	bics	r2, r1
 8000cfa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6959      	ldr	r1, [r3, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d06:	2207      	movs	r2, #7
 8000d08:	401a      	ands	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <HAL_ADC_Init+0x27c>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10b      	bne.n	8000d3a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	4393      	bics	r3, r2
 8000d30:	2201      	movs	r2, #1
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d38:	e01c      	b.n	8000d74 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3e:	2212      	movs	r2, #18
 8000d40:	4393      	bics	r3, r2
 8000d42:	2210      	movs	r2, #16
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d5e:	e009      	b.n	8000d74 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d64:	2210      	movs	r2, #16
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b004      	add	sp, #16
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	fffffefd 	.word	0xfffffefd
 8000d88:	fffe0219 	.word	0xfffe0219
 8000d8c:	833fffe7 	.word	0x833fffe7

08000d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	055b      	lsls	r3, r3, #21
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d011      	beq.n	8000dd6 <HAL_ADC_ConfigChannel+0x46>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d00d      	beq.n	8000dd6 <HAL_ADC_ConfigChannel+0x46>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d009      	beq.n	8000dd6 <HAL_ADC_ConfigChannel+0x46>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d005      	beq.n	8000dd6 <HAL_ADC_ConfigChannel+0x46>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d001      	beq.n	8000dd6 <HAL_ADC_ConfigChannel+0x46>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2234      	movs	r2, #52	; 0x34
 8000dda:	5c9b      	ldrb	r3, [r3, r2]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d101      	bne.n	8000de4 <HAL_ADC_ConfigChannel+0x54>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e0d0      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x1f6>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2234      	movs	r2, #52	; 0x34
 8000de8:	2101      	movs	r1, #1
 8000dea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2204      	movs	r2, #4
 8000df4:	4013      	ands	r3, r2
 8000df6:	d000      	beq.n	8000dfa <HAL_ADC_ConfigChannel+0x6a>
 8000df8:	e0b4      	b.n	8000f64 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a64      	ldr	r2, [pc, #400]	; (8000f90 <HAL_ADC_ConfigChannel+0x200>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d100      	bne.n	8000e06 <HAL_ADC_ConfigChannel+0x76>
 8000e04:	e082      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	055b      	lsls	r3, r3, #21
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d037      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d033      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d02f      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d02b      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d027      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d023      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	2b06      	cmp	r3, #6
 8000e56:	d01f      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d01b      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	2107      	movs	r1, #7
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d012      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	695a      	ldr	r2, [r3, #20]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2107      	movs	r1, #7
 8000e7e:	438a      	bics	r2, r1
 8000e80:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6959      	ldr	r1, [r3, #20]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	401a      	ands	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d007      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x120>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b11      	cmp	r3, #17
 8000ea6:	d003      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x120>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b12      	cmp	r3, #18
 8000eae:	d163      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000eb0:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_ADC_ConfigChannel+0x204>)
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b10      	cmp	r3, #16
 8000eba:	d009      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0x140>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b11      	cmp	r3, #17
 8000ec2:	d102      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x13a>
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	03db      	lsls	r3, r3, #15
 8000ec8:	e004      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x144>
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	045b      	lsls	r3, r3, #17
 8000ece:	e001      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x144>
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <HAL_ADC_ConfigChannel+0x204>)
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b10      	cmp	r3, #16
 8000ee0:	d14a      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <HAL_ADC_ConfigChannel+0x208>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	492d      	ldr	r1, [pc, #180]	; (8000f9c <HAL_ADC_ConfigChannel+0x20c>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff f90d 	bl	8000108 <__udivsi3>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000efc:	e002      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f9      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x16e>
 8000f0a:	e035      	b.n	8000f78 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2101      	movs	r1, #1
 8000f18:	4099      	lsls	r1, r3
 8000f1a:	000b      	movs	r3, r1
 8000f1c:	43d9      	mvns	r1, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	400a      	ands	r2, r1
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b10      	cmp	r3, #16
 8000f2c:	d007      	beq.n	8000f3e <HAL_ADC_ConfigChannel+0x1ae>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b11      	cmp	r3, #17
 8000f34:	d003      	beq.n	8000f3e <HAL_ADC_ConfigChannel+0x1ae>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b12      	cmp	r3, #18
 8000f3c:	d11c      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_ADC_ConfigChannel+0x204>)
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d007      	beq.n	8000f5a <HAL_ADC_ConfigChannel+0x1ca>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d101      	bne.n	8000f56 <HAL_ADC_ConfigChannel+0x1c6>
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_ADC_ConfigChannel+0x210>)
 8000f54:	e002      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x1cc>
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_ADC_ConfigChannel+0x214>)
 8000f58:	e000      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x1cc>
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_ADC_ConfigChannel+0x218>)
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_ADC_ConfigChannel+0x204>)
 8000f5e:	400b      	ands	r3, r1
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e009      	b.n	8000f78 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f68:	2220      	movs	r2, #32
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2234      	movs	r2, #52	; 0x34
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f80:	230f      	movs	r3, #15
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	781b      	ldrb	r3, [r3, #0]
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	00001001 	.word	0x00001001
 8000f94:	40012708 	.word	0x40012708
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	000f4240 	.word	0x000f4240
 8000fa0:	ffbfffff 	.word	0xffbfffff
 8000fa4:	feffffff 	.word	0xfeffffff
 8000fa8:	ff7fffff 	.word	0xff7fffff

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc0:	d828      	bhi.n	8001014 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc2:	4a2f      	ldr	r2, [pc, #188]	; (8001080 <__NVIC_SetPriority+0xd4>)
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	33c0      	adds	r3, #192	; 0xc0
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	589b      	ldr	r3, [r3, r2]
 8000fd2:	1dfa      	adds	r2, r7, #7
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	2203      	movs	r2, #3
 8000fda:	400a      	ands	r2, r1
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	21ff      	movs	r1, #255	; 0xff
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	43d2      	mvns	r2, r2
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	4003      	ands	r3, r0
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	481f      	ldr	r0, [pc, #124]	; (8001080 <__NVIC_SetPriority+0xd4>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b25b      	sxtb	r3, r3
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	430a      	orrs	r2, r1
 800100c:	33c0      	adds	r3, #192	; 0xc0
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001012:	e031      	b.n	8001078 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <__NVIC_SetPriority+0xd8>)
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	0019      	movs	r1, r3
 800101c:	230f      	movs	r3, #15
 800101e:	400b      	ands	r3, r1
 8001020:	3b08      	subs	r3, #8
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3306      	adds	r3, #6
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	3304      	adds	r3, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1dfa      	adds	r2, r7, #7
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	0011      	movs	r1, r2
 8001034:	2203      	movs	r2, #3
 8001036:	400a      	ands	r2, r1
 8001038:	00d2      	lsls	r2, r2, #3
 800103a:	21ff      	movs	r1, #255	; 0xff
 800103c:	4091      	lsls	r1, r2
 800103e:	000a      	movs	r2, r1
 8001040:	43d2      	mvns	r2, r2
 8001042:	401a      	ands	r2, r3
 8001044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	019b      	lsls	r3, r3, #6
 800104a:	22ff      	movs	r2, #255	; 0xff
 800104c:	401a      	ands	r2, r3
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0018      	movs	r0, r3
 8001054:	2303      	movs	r3, #3
 8001056:	4003      	ands	r3, r0
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <__NVIC_SetPriority+0xd8>)
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	001c      	movs	r4, r3
 8001064:	230f      	movs	r3, #15
 8001066:	4023      	ands	r3, r4
 8001068:	3b08      	subs	r3, #8
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	430a      	orrs	r2, r1
 800106e:	3306      	adds	r3, #6
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	18c3      	adds	r3, r0, r3
 8001074:	3304      	adds	r3, #4
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b003      	add	sp, #12
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1e5a      	subs	r2, r3, #1
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	045b      	lsls	r3, r3, #17
 8001098:	429a      	cmp	r2, r3
 800109a:	d301      	bcc.n	80010a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109c:	2301      	movs	r3, #1
 800109e:	e010      	b.n	80010c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <SysTick_Config+0x44>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	3a01      	subs	r2, #1
 80010a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a8:	2301      	movs	r3, #1
 80010aa:	425b      	negs	r3, r3
 80010ac:	2103      	movs	r1, #3
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff ff7c 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x44>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x44>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	210f      	movs	r1, #15
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	1c02      	adds	r2, r0, #0
 80010e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff ffbf 	bl	8001088 <SysTick_Config>
 800110a:	0003      	movs	r3, r0
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e155      	b.n	80013d0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4091      	lsls	r1, r2
 800112e:	000a      	movs	r2, r1
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <HAL_GPIO_Init+0x28>
 800113a:	e146      	b.n	80013ca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2203      	movs	r2, #3
 8001142:	4013      	ands	r3, r2
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	409a      	lsls	r2, r3
 8001176:	0013      	movs	r3, r2
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	2201      	movs	r2, #1
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	4013      	ands	r3, r2
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d017      	beq.n	80011f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d123      	bne.n	8001246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	58d3      	ldr	r3, [r2, r3]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2207      	movs	r2, #7
 8001210:	4013      	ands	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	43da      	mvns	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2107      	movs	r1, #7
 800122a:	400b      	ands	r3, r1
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	6939      	ldr	r1, [r7, #16]
 8001244:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	401a      	ands	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	23c0      	movs	r3, #192	; 0xc0
 8001280:	029b      	lsls	r3, r3, #10
 8001282:	4013      	ands	r3, r2
 8001284:	d100      	bne.n	8001288 <HAL_GPIO_Init+0x174>
 8001286:	e0a0      	b.n	80013ca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_GPIO_Init+0x2d4>)
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x2d4>)
 800128e:	2101      	movs	r1, #1
 8001290:	430a      	orrs	r2, r1
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <HAL_GPIO_Init+0x2d4>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_GPIO_Init+0x2d8>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	589b      	ldr	r3, [r3, r2]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2203      	movs	r2, #3
 80012b2:	4013      	ands	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	409a      	lsls	r2, r3
 80012ba:	0013      	movs	r3, r2
 80012bc:	43da      	mvns	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	2390      	movs	r3, #144	; 0x90
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x1ee>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x1ea>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a46      	ldr	r2, [pc, #280]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x1e6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a45      	ldr	r2, [pc, #276]	; (80013f8 <HAL_GPIO_Init+0x2e4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a44      	ldr	r2, [pc, #272]	; (80013fc <HAL_GPIO_Init+0x2e8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x1de>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x1f0>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x1f0>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x1f0>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x1f0>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x1f0>
 8001302:	2300      	movs	r3, #0
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	2103      	movs	r1, #3
 8001308:	400a      	ands	r2, r1
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001314:	4935      	ldr	r1, [pc, #212]	; (80013ec <HAL_GPIO_Init+0x2d8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	4013      	ands	r3, r2
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	035b      	lsls	r3, r3, #13
 800138e:	4013      	ands	r3, r2
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	039b      	lsls	r3, r3, #14
 80013b8:	4013      	ands	r3, r2
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	40da      	lsrs	r2, r3
 80013d8:	1e13      	subs	r3, r2, #0
 80013da:	d000      	beq.n	80013de <HAL_GPIO_Init+0x2ca>
 80013dc:	e6a2      	b.n	8001124 <HAL_GPIO_Init+0x10>
  } 
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b006      	add	sp, #24
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	48000400 	.word	0x48000400
 80013f4:	48000800 	.word	0x48000800
 80013f8:	48000c00 	.word	0x48000c00
 80013fc:	48001000 	.word	0x48001000
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	0008      	movs	r0, r1
 800140e:	0011      	movs	r1, r2
 8001410:	1cbb      	adds	r3, r7, #2
 8001412:	1c02      	adds	r2, r0, #0
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	1c7b      	adds	r3, r7, #1
 8001418:	1c0a      	adds	r2, r1, #0
 800141a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	1c7b      	adds	r3, r7, #1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001424:	1cbb      	adds	r3, r7, #2
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142e:	1cbb      	adds	r3, r7, #2
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	f000 fb76 	bl	8001b40 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	d100      	bne.n	8001460 <HAL_RCC_OscConfig+0x20>
 800145e:	e08e      	b.n	800157e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001460:	4bc5      	ldr	r3, [pc, #788]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	220c      	movs	r2, #12
 8001466:	4013      	ands	r3, r2
 8001468:	2b04      	cmp	r3, #4
 800146a:	d00e      	beq.n	800148a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800146c:	4bc2      	ldr	r3, [pc, #776]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	220c      	movs	r2, #12
 8001472:	4013      	ands	r3, r2
 8001474:	2b08      	cmp	r3, #8
 8001476:	d117      	bne.n	80014a8 <HAL_RCC_OscConfig+0x68>
 8001478:	4bbf      	ldr	r3, [pc, #764]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	23c0      	movs	r3, #192	; 0xc0
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	401a      	ands	r2, r3
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	025b      	lsls	r3, r3, #9
 8001486:	429a      	cmp	r2, r3
 8001488:	d10e      	bne.n	80014a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148a:	4bbb      	ldr	r3, [pc, #748]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d100      	bne.n	8001498 <HAL_RCC_OscConfig+0x58>
 8001496:	e071      	b.n	800157c <HAL_RCC_OscConfig+0x13c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d000      	beq.n	80014a2 <HAL_RCC_OscConfig+0x62>
 80014a0:	e06c      	b.n	800157c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f000 fb4c 	bl	8001b40 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x80>
 80014b0:	4bb1      	ldr	r3, [pc, #708]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4bb0      	ldr	r3, [pc, #704]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	0249      	lsls	r1, r1, #9
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e02f      	b.n	8001520 <HAL_RCC_OscConfig+0xe0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0xa2>
 80014c8:	4bab      	ldr	r3, [pc, #684]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4baa      	ldr	r3, [pc, #680]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014ce:	49ab      	ldr	r1, [pc, #684]	; (800177c <HAL_RCC_OscConfig+0x33c>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	4ba8      	ldr	r3, [pc, #672]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4ba7      	ldr	r3, [pc, #668]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014da:	49a9      	ldr	r1, [pc, #676]	; (8001780 <HAL_RCC_OscConfig+0x340>)
 80014dc:	400a      	ands	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e01e      	b.n	8001520 <HAL_RCC_OscConfig+0xe0>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d10e      	bne.n	8001508 <HAL_RCC_OscConfig+0xc8>
 80014ea:	4ba3      	ldr	r3, [pc, #652]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4ba2      	ldr	r3, [pc, #648]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	02c9      	lsls	r1, r1, #11
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	4b9f      	ldr	r3, [pc, #636]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b9e      	ldr	r3, [pc, #632]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0249      	lsls	r1, r1, #9
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xe0>
 8001508:	4b9b      	ldr	r3, [pc, #620]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b9a      	ldr	r3, [pc, #616]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800150e:	499b      	ldr	r1, [pc, #620]	; (800177c <HAL_RCC_OscConfig+0x33c>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	4b98      	ldr	r3, [pc, #608]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b97      	ldr	r3, [pc, #604]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800151a:	4999      	ldr	r1, [pc, #612]	; (8001780 <HAL_RCC_OscConfig+0x340>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d014      	beq.n	8001552 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fae8 	bl	8000afc <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001532:	f7ff fae3 	bl	8000afc <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b64      	cmp	r3, #100	; 0x64
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e2fd      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001544:	4b8c      	ldr	r3, [pc, #560]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	029b      	lsls	r3, r3, #10
 800154c:	4013      	ands	r3, r2
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0xf2>
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fad3 	bl	8000afc <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff face 	bl	8000afc <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e2e8      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b82      	ldr	r3, [pc, #520]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	029b      	lsls	r3, r3, #10
 8001576:	4013      	ands	r3, r2
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x11c>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d100      	bne.n	800158a <HAL_RCC_OscConfig+0x14a>
 8001588:	e06c      	b.n	8001664 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	220c      	movs	r2, #12
 8001590:	4013      	ands	r3, r2
 8001592:	d00e      	beq.n	80015b2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001594:	4b78      	ldr	r3, [pc, #480]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	220c      	movs	r2, #12
 800159a:	4013      	ands	r3, r2
 800159c:	2b08      	cmp	r3, #8
 800159e:	d11f      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1a0>
 80015a0:	4b75      	ldr	r3, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	23c0      	movs	r3, #192	; 0xc0
 80015a6:	025b      	lsls	r3, r3, #9
 80015a8:	401a      	ands	r2, r3
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b71      	ldr	r3, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x188>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e2bb      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	22f8      	movs	r2, #248	; 0xf8
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00da      	lsls	r2, r3, #3
 80015d8:	4b67      	ldr	r3, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e041      	b.n	8001664 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d024      	beq.n	8001632 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b62      	ldr	r3, [pc, #392]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fa82 	bl	8000afc <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fa7d 	bl	8000afc <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e297      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2202      	movs	r2, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d0f1      	beq.n	80015fe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	22f8      	movs	r2, #248	; 0xf8
 8001620:	4393      	bics	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00da      	lsls	r2, r3, #3
 800162a:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e018      	b.n	8001664 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001638:	2101      	movs	r1, #1
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fa5d 	bl	8000afc <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fa58 	bl	8000afc <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e272      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d1f1      	bne.n	8001648 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2208      	movs	r2, #8
 800166a:	4013      	ands	r3, r2
 800166c:	d036      	beq.n	80016dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800167c:	2101      	movs	r1, #1
 800167e:	430a      	orrs	r2, r1
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fa3b 	bl	8000afc <HAL_GetTick>
 8001686:	0003      	movs	r3, r0
 8001688:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fa36 	bl	8000afc <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e250      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	2202      	movs	r2, #2
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f1      	beq.n	800168c <HAL_RCC_OscConfig+0x24c>
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80016ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	438a      	bics	r2, r1
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa21 	bl	8000afc <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fa1c 	bl	8000afc <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e236      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d1f1      	bne.n	80016c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2204      	movs	r2, #4
 80016e2:	4013      	ands	r3, r2
 80016e4:	d100      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2a8>
 80016e6:	e0b5      	b.n	8001854 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e8:	201f      	movs	r0, #31
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	055b      	lsls	r3, r3, #21
 80016f8:	4013      	ands	r3, r2
 80016fa:	d110      	bne.n	800171e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 80016fe:	69da      	ldr	r2, [r3, #28]
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0549      	lsls	r1, r1, #21
 8001706:	430a      	orrs	r2, r1
 8001708:	61da      	str	r2, [r3, #28]
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	055b      	lsls	r3, r3, #21
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001718:	183b      	adds	r3, r7, r0
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_OscConfig+0x344>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4013      	ands	r3, r2
 8001728:	d11a      	bne.n	8001760 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_RCC_OscConfig+0x344>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_RCC_OscConfig+0x344>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0049      	lsls	r1, r1, #1
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001738:	f7ff f9e0 	bl	8000afc <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff f9db 	bl	8000afc <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	; 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e1f5      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x344>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10f      	bne.n	8001788 <HAL_RCC_OscConfig+0x348>
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800176e:	2101      	movs	r1, #1
 8001770:	430a      	orrs	r2, r1
 8001772:	621a      	str	r2, [r3, #32]
 8001774:	e036      	b.n	80017e4 <HAL_RCC_OscConfig+0x3a4>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	fffeffff 	.word	0xfffeffff
 8001780:	fffbffff 	.word	0xfffbffff
 8001784:	40007000 	.word	0x40007000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x36a>
 8001790:	4bca      	ldr	r3, [pc, #808]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	4bc9      	ldr	r3, [pc, #804]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001796:	2101      	movs	r1, #1
 8001798:	438a      	bics	r2, r1
 800179a:	621a      	str	r2, [r3, #32]
 800179c:	4bc7      	ldr	r3, [pc, #796]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4bc6      	ldr	r3, [pc, #792]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017a2:	2104      	movs	r1, #4
 80017a4:	438a      	bics	r2, r1
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x3a4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x38c>
 80017b2:	4bc2      	ldr	r3, [pc, #776]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017b4:	6a1a      	ldr	r2, [r3, #32]
 80017b6:	4bc1      	ldr	r3, [pc, #772]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017b8:	2104      	movs	r1, #4
 80017ba:	430a      	orrs	r2, r1
 80017bc:	621a      	str	r2, [r3, #32]
 80017be:	4bbf      	ldr	r3, [pc, #764]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	4bbe      	ldr	r3, [pc, #760]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	430a      	orrs	r2, r1
 80017c8:	621a      	str	r2, [r3, #32]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0x3a4>
 80017cc:	4bbb      	ldr	r3, [pc, #748]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	4bba      	ldr	r3, [pc, #744]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	438a      	bics	r2, r1
 80017d6:	621a      	str	r2, [r3, #32]
 80017d8:	4bb8      	ldr	r3, [pc, #736]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017da:	6a1a      	ldr	r2, [r3, #32]
 80017dc:	4bb7      	ldr	r3, [pc, #732]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80017de:	2104      	movs	r1, #4
 80017e0:	438a      	bics	r2, r1
 80017e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d014      	beq.n	8001816 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff f986 	bl	8000afc <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	e009      	b.n	800180a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f7ff f981 	bl	8000afc <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4aaf      	ldr	r2, [pc, #700]	; (8001ac0 <HAL_RCC_OscConfig+0x680>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e19a      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	4bac      	ldr	r3, [pc, #688]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3b6>
 8001814:	e013      	b.n	800183e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff f971 	bl	8000afc <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff f96c 	bl	8000afc <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4aa5      	ldr	r2, [pc, #660]	; (8001ac0 <HAL_RCC_OscConfig+0x680>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e185      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	4ba1      	ldr	r3, [pc, #644]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	2202      	movs	r2, #2
 800183a:	4013      	ands	r3, r2
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800183e:	231f      	movs	r3, #31
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b9c      	ldr	r3, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800184a:	69da      	ldr	r2, [r3, #28]
 800184c:	4b9b      	ldr	r3, [pc, #620]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800184e:	499d      	ldr	r1, [pc, #628]	; (8001ac4 <HAL_RCC_OscConfig+0x684>)
 8001850:	400a      	ands	r2, r1
 8001852:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2210      	movs	r2, #16
 800185a:	4013      	ands	r3, r2
 800185c:	d063      	beq.n	8001926 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d12a      	bne.n	80018bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001866:	4b95      	ldr	r3, [pc, #596]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186a:	4b94      	ldr	r3, [pc, #592]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800186c:	2104      	movs	r1, #4
 800186e:	430a      	orrs	r2, r1
 8001870:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001872:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001876:	4b91      	ldr	r3, [pc, #580]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001878:	2101      	movs	r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff f93d 	bl	8000afc <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001888:	f7ff f938 	bl	8000afc <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e152      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d0f1      	beq.n	8001888 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018a4:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	22f8      	movs	r2, #248	; 0xf8
 80018aa:	4393      	bics	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	00da      	lsls	r2, r3, #3
 80018b4:	4b81      	ldr	r3, [pc, #516]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ba:	e034      	b.n	8001926 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	3305      	adds	r3, #5
 80018c2:	d111      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018c4:	4b7d      	ldr	r3, [pc, #500]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c8:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018ca:	2104      	movs	r1, #4
 80018cc:	438a      	bics	r2, r1
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d0:	4b7a      	ldr	r3, [pc, #488]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	22f8      	movs	r2, #248	; 0xf8
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	00da      	lsls	r2, r3, #3
 80018e0:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
 80018e6:	e01e      	b.n	8001926 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018e8:	4b74      	ldr	r3, [pc, #464]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018ee:	2104      	movs	r1, #4
 80018f0:	430a      	orrs	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018f4:	4b71      	ldr	r3, [pc, #452]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f8:	4b70      	ldr	r3, [pc, #448]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff f8fc 	bl	8000afc <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800190a:	f7ff f8f7 	bl	8000afc <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e111      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800191c:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d1f1      	bne.n	800190a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2220      	movs	r2, #32
 800192c:	4013      	ands	r3, r2
 800192e:	d05c      	beq.n	80019ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	220c      	movs	r2, #12
 8001936:	4013      	ands	r3, r2
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d00e      	beq.n	800195a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800193c:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	220c      	movs	r2, #12
 8001942:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001944:	2b08      	cmp	r3, #8
 8001946:	d114      	bne.n	8001972 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001948:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	23c0      	movs	r3, #192	; 0xc0
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	401a      	ands	r2, r3
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	025b      	lsls	r3, r3, #9
 8001956:	429a      	cmp	r2, r3
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800195c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4013      	ands	r3, r2
 8001964:	d040      	beq.n	80019e8 <HAL_RCC_OscConfig+0x5a8>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d03c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0e6      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 800197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197e:	4b4f      	ldr	r3, [pc, #316]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0249      	lsls	r1, r1, #9
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f8b8 	bl	8000afc <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001992:	f7ff f8b3 	bl	8000afc <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0cd      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019a4:	4b45      	ldr	r3, [pc, #276]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	025b      	lsls	r3, r3, #9
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x552>
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80019b8:	4943      	ldr	r1, [pc, #268]	; (8001ac8 <HAL_RCC_OscConfig+0x688>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff f89d 	bl	8000afc <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c8:	f7ff f898 	bl	8000afc <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0b2      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019da:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80019dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	4013      	ands	r3, r2
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x588>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d100      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5b4>
 80019f2:	e0a4      	b.n	8001b3e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f4:	4b31      	ldr	r3, [pc, #196]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	220c      	movs	r2, #12
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d100      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5c2>
 8001a00:	e078      	b.n	8001af4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d14c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a10:	492e      	ldr	r1, [pc, #184]	; (8001acc <HAL_RCC_OscConfig+0x68c>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff f871 	bl	8000afc <HAL_GetTick>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f86c 	bl	8000afc <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e086      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	220f      	movs	r2, #15
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <HAL_RCC_OscConfig+0x690>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	431a      	orrs	r2, r3
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0449      	lsls	r1, r1, #17
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f83f 	bl	8000afc <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f83a 	bl	8000afc <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e054      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	049b      	lsls	r3, r3, #18
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x644>
 8001aa2:	e04c      	b.n	8001b3e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <HAL_RCC_OscConfig+0x68c>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f824 	bl	8000afc <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x6a6>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	00001388 	.word	0x00001388
 8001ac4:	efffffff 	.word	0xefffffff
 8001ac8:	fffeffff 	.word	0xfffeffff
 8001acc:	feffffff 	.word	0xfeffffff
 8001ad0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f812 	bl	8000afc <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e02c      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_OscConfig+0x708>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	049b      	lsls	r3, r3, #18
 8001aee:	4013      	ands	r3, r2
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x694>
 8001af2:	e024      	b.n	8001b3e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e01f      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_OscConfig+0x708>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_RCC_OscConfig+0x708>)
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10e      	bne.n	8001b3a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	220f      	movs	r2, #15
 8001b20:	401a      	ands	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	23f0      	movs	r3, #240	; 0xf0
 8001b2e:	039b      	lsls	r3, r3, #14
 8001b30:	401a      	ands	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b008      	add	sp, #32
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0bf      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d911      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b5b      	ldr	r3, [pc, #364]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e0a6      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d015      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d006      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001bac:	21e0      	movs	r1, #224	; 0xe0
 8001bae:	00c9      	lsls	r1, r1, #3
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	22f0      	movs	r2, #240	; 0xf0
 8001bba:	4393      	bics	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d04c      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d120      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07a      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	049b      	lsls	r3, r3, #18
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d114      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06e      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	025b      	lsls	r3, r3, #9
 8001c12:	4013      	ands	r3, r2
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e062      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e05b      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	4393      	bics	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe ff5e 	bl	8000afc <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c46:	f7fe ff59 	bl	8000afc <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e042      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1ec      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d211      	bcs.n	8001c9e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4393      	bics	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_RCC_ClockConfig+0x19c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e020      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_RCC_ClockConfig+0x1a8>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cbc:	f000 f820 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_ClockConfig+0x1a0>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	220f      	movs	r2, #15
 8001cca:	4013      	ands	r3, r2
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x1ac>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	40da      	lsrs	r2, r3
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1b0>)
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7fe fec9 	bl	8000a70 <HAL_InitTick>
  
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	00001388 	.word	0x00001388
 8001cf4:	fffff8ff 	.word	0xfffff8ff
 8001cf8:	08003578 	.word	0x08003578
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b08f      	sub	sp, #60	; 0x3c
 8001d04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d06:	2314      	movs	r3, #20
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	4a38      	ldr	r2, [pc, #224]	; (8001dec <HAL_RCC_GetSysClockFreq+0xec>)
 8001d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4a36      	ldr	r2, [pc, #216]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d047      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001d44:	d849      	bhi.n	8001dda <HAL_RCC_GetSysClockFreq+0xda>
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x50>
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x56>
 8001d4e:	e044      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d54:	e044      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	0c9b      	lsrs	r3, r3, #18
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2214      	movs	r2, #20
 8001d60:	18ba      	adds	r2, r7, r2
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	1d3a      	adds	r2, r7, #4
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	23c0      	movs	r3, #192	; 0xc0
 8001d78:	025b      	lsls	r3, r3, #9
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d109      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d86:	481c      	ldr	r0, [pc, #112]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d88:	f7fe f9be 	bl	8000108 <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	001a      	movs	r2, r3
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	4353      	muls	r3, r2
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
 8001d96:	e01a      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	401a      	ands	r2, r3
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d109      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dac:	f7fe f9ac 	bl	8000108 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	001a      	movs	r2, r3
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	4353      	muls	r3, r2
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dba:	e008      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dbe:	480e      	ldr	r0, [pc, #56]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc0:	f7fe f9a2 	bl	8000108 <__udivsi3>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	4353      	muls	r3, r2
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dd8:	e002      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b00f      	add	sp, #60	; 0x3c
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	08003558 	.word	0x08003558
 8001df0:	08003568 	.word	0x08003568
 8001df4:	40021000 	.word	0x40021000
 8001df8:	007a1200 	.word	0x007a1200
 8001dfc:	02dc6c00 	.word	0x02dc6c00

08001e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	20000000 	.word	0x20000000

08001e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e18:	f7ff fff2 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e1c:	0001      	movs	r1, r0
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	2207      	movs	r2, #7
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	000b      	movs	r3, r1
}    
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08003588 	.word	0x08003588

08001e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d100      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e5c:	e08e      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2017      	movs	r0, #23
 8001e60:	183b      	adds	r3, r7, r0
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b6e      	ldr	r3, [pc, #440]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	055b      	lsls	r3, r3, #21
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d110      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b6b      	ldr	r3, [pc, #428]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0549      	lsls	r1, r1, #21
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	61da      	str	r2, [r3, #28]
 8001e80:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	055b      	lsls	r3, r3, #21
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d11a      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea0:	4b60      	ldr	r3, [pc, #384]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	0049      	lsls	r1, r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7fe fe25 	bl	8000afc <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	e008      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb8:	f7fe fe20 	bl	8000afc <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0a6      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b56      	ldr	r3, [pc, #344]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ed6:	4b52      	ldr	r3, [pc, #328]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d034      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	23c0      	movs	r3, #192	; 0xc0
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d02c      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef8:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a4a      	ldr	r2, [pc, #296]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0249      	lsls	r1, r1, #9
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f16:	4945      	ldr	r1, [pc, #276]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fde7 	bl	8000afc <HAL_GetTick>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f32:	e009      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7fe fde2 	bl	8000afc <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e067      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f66:	2317      	movs	r3, #23
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f76:	492f      	ldr	r1, [pc, #188]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a23      	ldr	r2, [pc, #140]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	4393      	bics	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	029b      	lsls	r3, r3, #10
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	4393      	bics	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4013      	ands	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	4393      	bics	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002012:	430a      	orrs	r2, r1
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b006      	add	sp, #24
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	fffffcff 	.word	0xfffffcff
 800202c:	fffeffff 	.word	0xfffeffff
 8002030:	00001388 	.word	0x00001388
 8002034:	efffffff 	.word	0xefffffff
 8002038:	fffcffff 	.word	0xfffcffff

0800203c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0a8      	b.n	80021a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	2382      	movs	r3, #130	; 0x82
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	429a      	cmp	r2, r3
 8002060:	d009      	beq.n	8002076 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	61da      	str	r2, [r3, #28]
 8002068:	e005      	b.n	8002076 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	225d      	movs	r2, #93	; 0x5d
 8002080:	5c9b      	ldrb	r3, [r3, r2]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d107      	bne.n	8002098 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	225c      	movs	r2, #92	; 0x5c
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f7fe fb36 	bl	8000704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	225d      	movs	r2, #93	; 0x5d
 800209c:	2102      	movs	r1, #2
 800209e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2140      	movs	r1, #64	; 0x40
 80020ac:	438a      	bics	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	23e0      	movs	r3, #224	; 0xe0
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d902      	bls.n	80020c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e002      	b.n	80020c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	015b      	lsls	r3, r3, #5
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	23f0      	movs	r3, #240	; 0xf0
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d008      	beq.n	80020e6 <HAL_SPI_Init+0xaa>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	23e0      	movs	r3, #224	; 0xe0
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	429a      	cmp	r2, r3
 80020de:	d002      	beq.n	80020e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	2382      	movs	r3, #130	; 0x82
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	401a      	ands	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6899      	ldr	r1, [r3, #8]
 80020f4:	2384      	movs	r3, #132	; 0x84
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	400b      	ands	r3, r1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2102      	movs	r1, #2
 8002102:	400b      	ands	r3, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2101      	movs	r1, #1
 800210c:	400b      	ands	r3, r1
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6999      	ldr	r1, [r3, #24]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	400b      	ands	r3, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2138      	movs	r1, #56	; 0x38
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	400b      	ands	r3, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	0011      	movs	r1, r2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	2204      	movs	r2, #4
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2110      	movs	r1, #16
 8002154:	400b      	ands	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	2108      	movs	r1, #8
 800215e:	400b      	ands	r3, r1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68d9      	ldr	r1, [r3, #12]
 8002166:	23f0      	movs	r3, #240	; 0xf0
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	400b      	ands	r3, r1
 800216c:	431a      	orrs	r2, r3
 800216e:	0011      	movs	r1, r2
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	015b      	lsls	r3, r3, #5
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4907      	ldr	r1, [pc, #28]	; (80021a8 <HAL_SPI_Init+0x16c>)
 800218c:	400a      	ands	r2, r1
 800218e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	225d      	movs	r2, #93	; 0x5d
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	fffff7ff 	.word	0xfffff7ff

080021ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e044      	b.n	8002248 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2274      	movs	r2, #116	; 0x74
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fb0b 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f8da 	bl	80023a8 <UART_SetConfig>
 80021f4:	0003      	movs	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e024      	b.n	8002248 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fa55 	bl	80026b8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	490d      	ldr	r1, [pc, #52]	; (8002250 <HAL_UART_Init+0xa4>)
 800221a:	400a      	ands	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	212a      	movs	r1, #42	; 0x2a
 800222a:	438a      	bics	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 faed 	bl	8002820 <UART_CheckIdleState>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	ffffb7ff 	.word	0xffffb7ff

08002254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	1dbb      	adds	r3, r7, #6
 8002262:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002268:	2b20      	cmp	r3, #32
 800226a:	d000      	beq.n	800226e <HAL_UART_Transmit+0x1a>
 800226c:	e096      	b.n	800239c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_UART_Transmit+0x28>
 8002274:	1dbb      	adds	r3, r7, #6
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e08e      	b.n	800239e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	429a      	cmp	r2, r3
 800228a:	d109      	bne.n	80022a0 <HAL_UART_Transmit+0x4c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d001      	beq.n	80022a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e07e      	b.n	800239e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2274      	movs	r2, #116	; 0x74
 80022a4:	5c9b      	ldrb	r3, [r3, r2]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Transmit+0x5a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e077      	b.n	800239e <HAL_UART_Transmit+0x14a>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2274      	movs	r2, #116	; 0x74
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	2100      	movs	r1, #0
 80022bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	; 0x21
 80022c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fc1a 	bl	8000afc <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1dba      	adds	r2, r7, #6
 80022d0:	2150      	movs	r1, #80	; 0x50
 80022d2:	8812      	ldrh	r2, [r2, #0]
 80022d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1dba      	adds	r2, r7, #6
 80022da:	2152      	movs	r1, #82	; 0x52
 80022dc:	8812      	ldrh	r2, [r2, #0]
 80022de:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d108      	bne.n	80022fe <HAL_UART_Transmit+0xaa>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e003      	b.n	8002306 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2274      	movs	r2, #116	; 0x74
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800230e:	e02d      	b.n	800236c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	0013      	movs	r3, r2
 800231a:	2200      	movs	r2, #0
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	f000 fac7 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 8002322:	1e03      	subs	r3, r0, #0
 8002324:	d001      	beq.n	800232a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e039      	b.n	800239e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	05d2      	lsls	r2, r2, #23
 800233a:	0dd2      	lsrs	r2, r2, #23
 800233c:	b292      	uxth	r2, r2
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	3302      	adds	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e008      	b.n	800235a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b292      	uxth	r2, r2
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3301      	adds	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2252      	movs	r2, #82	; 0x52
 800235e:	5a9b      	ldrh	r3, [r3, r2]
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b299      	uxth	r1, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2252      	movs	r2, #82	; 0x52
 800236a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2252      	movs	r2, #82	; 0x52
 8002370:	5a9b      	ldrh	r3, [r3, r2]
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1cb      	bne.n	8002310 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	0013      	movs	r3, r2
 8002382:	2200      	movs	r2, #0
 8002384:	2140      	movs	r1, #64	; 0x40
 8002386:	f000 fa93 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 800238a:	1e03      	subs	r3, r0, #0
 800238c:	d001      	beq.n	8002392 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e005      	b.n	800239e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b008      	add	sp, #32
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023b0:	231e      	movs	r3, #30
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4aaf      	ldr	r2, [pc, #700]	; (8002694 <UART_SetConfig+0x2ec>)
 80023d8:	4013      	ands	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4aaa      	ldr	r2, [pc, #680]	; (8002698 <UART_SetConfig+0x2f0>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4aa1      	ldr	r2, [pc, #644]	; (800269c <UART_SetConfig+0x2f4>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a9d      	ldr	r2, [pc, #628]	; (80026a0 <UART_SetConfig+0x2f8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d127      	bne.n	800247e <UART_SetConfig+0xd6>
 800242e:	4b9d      	ldr	r3, [pc, #628]	; (80026a4 <UART_SetConfig+0x2fc>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	2203      	movs	r2, #3
 8002434:	4013      	ands	r3, r2
 8002436:	2b03      	cmp	r3, #3
 8002438:	d00d      	beq.n	8002456 <UART_SetConfig+0xae>
 800243a:	d81b      	bhi.n	8002474 <UART_SetConfig+0xcc>
 800243c:	2b02      	cmp	r3, #2
 800243e:	d014      	beq.n	800246a <UART_SetConfig+0xc2>
 8002440:	d818      	bhi.n	8002474 <UART_SetConfig+0xcc>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <UART_SetConfig+0xa4>
 8002446:	2b01      	cmp	r3, #1
 8002448:	d00a      	beq.n	8002460 <UART_SetConfig+0xb8>
 800244a:	e013      	b.n	8002474 <UART_SetConfig+0xcc>
 800244c:	231f      	movs	r3, #31
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e065      	b.n	8002522 <UART_SetConfig+0x17a>
 8002456:	231f      	movs	r3, #31
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e060      	b.n	8002522 <UART_SetConfig+0x17a>
 8002460:	231f      	movs	r3, #31
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	2204      	movs	r2, #4
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e05b      	b.n	8002522 <UART_SetConfig+0x17a>
 800246a:	231f      	movs	r3, #31
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2208      	movs	r2, #8
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e056      	b.n	8002522 <UART_SetConfig+0x17a>
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2210      	movs	r2, #16
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e051      	b.n	8002522 <UART_SetConfig+0x17a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a89      	ldr	r2, [pc, #548]	; (80026a8 <UART_SetConfig+0x300>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d134      	bne.n	80024f2 <UART_SetConfig+0x14a>
 8002488:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <UART_SetConfig+0x2fc>)
 800248a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	4013      	ands	r3, r2
 8002492:	22c0      	movs	r2, #192	; 0xc0
 8002494:	0292      	lsls	r2, r2, #10
 8002496:	4293      	cmp	r3, r2
 8002498:	d017      	beq.n	80024ca <UART_SetConfig+0x122>
 800249a:	22c0      	movs	r2, #192	; 0xc0
 800249c:	0292      	lsls	r2, r2, #10
 800249e:	4293      	cmp	r3, r2
 80024a0:	d822      	bhi.n	80024e8 <UART_SetConfig+0x140>
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	0292      	lsls	r2, r2, #10
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <UART_SetConfig+0x136>
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	0292      	lsls	r2, r2, #10
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d81a      	bhi.n	80024e8 <UART_SetConfig+0x140>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <UART_SetConfig+0x118>
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	0252      	lsls	r2, r2, #9
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00a      	beq.n	80024d4 <UART_SetConfig+0x12c>
 80024be:	e013      	b.n	80024e8 <UART_SetConfig+0x140>
 80024c0:	231f      	movs	r3, #31
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	e02b      	b.n	8002522 <UART_SetConfig+0x17a>
 80024ca:	231f      	movs	r3, #31
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	2202      	movs	r2, #2
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e026      	b.n	8002522 <UART_SetConfig+0x17a>
 80024d4:	231f      	movs	r3, #31
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2204      	movs	r2, #4
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e021      	b.n	8002522 <UART_SetConfig+0x17a>
 80024de:	231f      	movs	r3, #31
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2208      	movs	r2, #8
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e01c      	b.n	8002522 <UART_SetConfig+0x17a>
 80024e8:	231f      	movs	r3, #31
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2210      	movs	r2, #16
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e017      	b.n	8002522 <UART_SetConfig+0x17a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6d      	ldr	r2, [pc, #436]	; (80026ac <UART_SetConfig+0x304>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d104      	bne.n	8002506 <UART_SetConfig+0x15e>
 80024fc:	231f      	movs	r3, #31
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e00d      	b.n	8002522 <UART_SetConfig+0x17a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <UART_SetConfig+0x308>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d104      	bne.n	800251a <UART_SetConfig+0x172>
 8002510:	231f      	movs	r3, #31
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e003      	b.n	8002522 <UART_SetConfig+0x17a>
 800251a:	231f      	movs	r3, #31
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	2210      	movs	r2, #16
 8002520:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	429a      	cmp	r2, r3
 800252c:	d15d      	bne.n	80025ea <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d015      	beq.n	8002564 <UART_SetConfig+0x1bc>
 8002538:	dc18      	bgt.n	800256c <UART_SetConfig+0x1c4>
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00d      	beq.n	800255a <UART_SetConfig+0x1b2>
 800253e:	dc15      	bgt.n	800256c <UART_SetConfig+0x1c4>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <UART_SetConfig+0x1a2>
 8002544:	2b02      	cmp	r3, #2
 8002546:	d005      	beq.n	8002554 <UART_SetConfig+0x1ac>
 8002548:	e010      	b.n	800256c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800254a:	f7ff fc63 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 800254e:	0003      	movs	r3, r0
 8002550:	61bb      	str	r3, [r7, #24]
        break;
 8002552:	e012      	b.n	800257a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002554:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <UART_SetConfig+0x30c>)
 8002556:	61bb      	str	r3, [r7, #24]
        break;
 8002558:	e00f      	b.n	800257a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800255a:	f7ff fbd1 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800255e:	0003      	movs	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]
        break;
 8002562:	e00a      	b.n	800257a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	61bb      	str	r3, [r7, #24]
        break;
 800256a:	e006      	b.n	800257a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002570:	231e      	movs	r3, #30
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
        break;
 8002578:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d100      	bne.n	8002582 <UART_SetConfig+0x1da>
 8002580:	e07b      	b.n	800267a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	005a      	lsls	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	18d2      	adds	r2, r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0019      	movs	r1, r3
 8002594:	0010      	movs	r0, r2
 8002596:	f7fd fdb7 	bl	8000108 <__udivsi3>
 800259a:	0003      	movs	r3, r0
 800259c:	b29b      	uxth	r3, r3
 800259e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	d91c      	bls.n	80025e0 <UART_SetConfig+0x238>
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	025b      	lsls	r3, r3, #9
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d217      	bcs.n	80025e0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	200e      	movs	r0, #14
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	210f      	movs	r1, #15
 80025ba:	438a      	bics	r2, r1
 80025bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2207      	movs	r2, #7
 80025c6:	4013      	ands	r3, r2
 80025c8:	b299      	uxth	r1, r3
 80025ca:	183b      	adds	r3, r7, r0
 80025cc:	183a      	adds	r2, r7, r0
 80025ce:	8812      	ldrh	r2, [r2, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	183a      	adds	r2, r7, r0
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	e04c      	b.n	800267a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80025e0:	231e      	movs	r3, #30
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e047      	b.n	800267a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025ea:	231f      	movs	r3, #31
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d015      	beq.n	8002620 <UART_SetConfig+0x278>
 80025f4:	dc18      	bgt.n	8002628 <UART_SetConfig+0x280>
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d00d      	beq.n	8002616 <UART_SetConfig+0x26e>
 80025fa:	dc15      	bgt.n	8002628 <UART_SetConfig+0x280>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <UART_SetConfig+0x25e>
 8002600:	2b02      	cmp	r3, #2
 8002602:	d005      	beq.n	8002610 <UART_SetConfig+0x268>
 8002604:	e010      	b.n	8002628 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002606:	f7ff fc05 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 800260a:	0003      	movs	r3, r0
 800260c:	61bb      	str	r3, [r7, #24]
        break;
 800260e:	e012      	b.n	8002636 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <UART_SetConfig+0x30c>)
 8002612:	61bb      	str	r3, [r7, #24]
        break;
 8002614:	e00f      	b.n	8002636 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002616:	f7ff fb73 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800261a:	0003      	movs	r3, r0
 800261c:	61bb      	str	r3, [r7, #24]
        break;
 800261e:	e00a      	b.n	8002636 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	61bb      	str	r3, [r7, #24]
        break;
 8002626:	e006      	b.n	8002636 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800262c:	231e      	movs	r3, #30
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
        break;
 8002634:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01e      	beq.n	800267a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	085a      	lsrs	r2, r3, #1
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	18d2      	adds	r2, r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0019      	movs	r1, r3
 800264c:	0010      	movs	r0, r2
 800264e:	f7fd fd5b 	bl	8000108 <__udivsi3>
 8002652:	0003      	movs	r3, r0
 8002654:	b29b      	uxth	r3, r3
 8002656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	d909      	bls.n	8002672 <UART_SetConfig+0x2ca>
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	025b      	lsls	r3, r3, #9
 8002664:	429a      	cmp	r2, r3
 8002666:	d204      	bcs.n	8002672 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	e003      	b.n	800267a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002672:	231e      	movs	r3, #30
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002686:	231e      	movs	r3, #30
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	781b      	ldrb	r3, [r3, #0]
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b008      	add	sp, #32
 8002692:	bd80      	pop	{r7, pc}
 8002694:	efff69f3 	.word	0xefff69f3
 8002698:	ffffcfff 	.word	0xffffcfff
 800269c:	fffff4ff 	.word	0xfffff4ff
 80026a0:	40013800 	.word	0x40013800
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40004400 	.word	0x40004400
 80026ac:	40004800 	.word	0x40004800
 80026b0:	40004c00 	.word	0x40004c00
 80026b4:	007a1200 	.word	0x007a1200

080026b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <UART_AdvFeatureConfig+0x144>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2202      	movs	r2, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d00b      	beq.n	8002704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a43      	ldr	r2, [pc, #268]	; (8002800 <UART_AdvFeatureConfig+0x148>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2204      	movs	r2, #4
 800270a:	4013      	ands	r3, r2
 800270c:	d00b      	beq.n	8002726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <UART_AdvFeatureConfig+0x14c>)
 8002716:	4013      	ands	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d00b      	beq.n	8002748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a34      	ldr	r2, [pc, #208]	; (8002808 <UART_AdvFeatureConfig+0x150>)
 8002738:	4013      	ands	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2210      	movs	r2, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d00b      	beq.n	800276a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a2c      	ldr	r2, [pc, #176]	; (800280c <UART_AdvFeatureConfig+0x154>)
 800275a:	4013      	ands	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2220      	movs	r2, #32
 8002770:	4013      	ands	r3, r2
 8002772:	d00b      	beq.n	800278c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4a25      	ldr	r2, [pc, #148]	; (8002810 <UART_AdvFeatureConfig+0x158>)
 800277c:	4013      	ands	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	4013      	ands	r3, r2
 8002794:	d01d      	beq.n	80027d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <UART_AdvFeatureConfig+0x15c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	035b      	lsls	r3, r3, #13
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d10b      	bne.n	80027d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a15      	ldr	r2, [pc, #84]	; (8002818 <UART_AdvFeatureConfig+0x160>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	4013      	ands	r3, r2
 80027da:	d00b      	beq.n	80027f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a0e      	ldr	r2, [pc, #56]	; (800281c <UART_AdvFeatureConfig+0x164>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  }
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b002      	add	sp, #8
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fffdffff 	.word	0xfffdffff
 8002800:	fffeffff 	.word	0xfffeffff
 8002804:	fffbffff 	.word	0xfffbffff
 8002808:	ffff7fff 	.word	0xffff7fff
 800280c:	ffffefff 	.word	0xffffefff
 8002810:	ffffdfff 	.word	0xffffdfff
 8002814:	ffefffff 	.word	0xffefffff
 8002818:	ff9fffff 	.word	0xff9fffff
 800281c:	fff7ffff 	.word	0xfff7ffff

08002820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	2100      	movs	r1, #0
 800282e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002830:	f7fe f964 	bl	8000afc <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	2b08      	cmp	r3, #8
 8002844:	d10c      	bne.n	8002860 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0391      	lsls	r1, r2, #14
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <UART_CheckIdleState+0x8c>)
 8002850:	9200      	str	r2, [sp, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	f000 f82c 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e021      	b.n	80028a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2204      	movs	r2, #4
 8002868:	4013      	ands	r3, r2
 800286a:	2b04      	cmp	r3, #4
 800286c:	d10c      	bne.n	8002888 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	03d1      	lsls	r1, r2, #15
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <UART_CheckIdleState+0x8c>)
 8002878:	9200      	str	r2, [sp, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	f000 f818 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d001      	beq.n	8002888 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e00d      	b.n	80028a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2274      	movs	r2, #116	; 0x74
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b004      	add	sp, #16
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	01ffffff 	.word	0x01ffffff

080028b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b094      	sub	sp, #80	; 0x50
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	1dfb      	adds	r3, r7, #7
 80028be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c0:	e0a3      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c4:	3301      	adds	r3, #1
 80028c6:	d100      	bne.n	80028ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80028c8:	e09f      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ca:	f7fe f917 	bl	8000afc <HAL_GetTick>
 80028ce:	0002      	movs	r2, r0
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80028da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d13d      	bne.n	800295c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e0:	f3ef 8310 	mrs	r3, PRIMASK
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ea:	2301      	movs	r3, #1
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	494c      	ldr	r1, [pc, #304]	; (8002a34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002902:	400a      	ands	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002912:	f3ef 8310 	mrs	r3, PRIMASK
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	643b      	str	r3, [r7, #64]	; 0x40
 800291c:	2301      	movs	r3, #1
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	f383 8810 	msr	PRIMASK, r3
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	438a      	bics	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293e:	f383 8810 	msr	PRIMASK, r3
}
 8002942:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2274      	movs	r2, #116	; 0x74
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e067      	b.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2204      	movs	r2, #4
 8002964:	4013      	ands	r3, r2
 8002966:	d050      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	401a      	ands	r2, r3
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	429a      	cmp	r2, r3
 800297a:	d146      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002986:	f3ef 8310 	mrs	r3, PRIMASK
 800298a:	613b      	str	r3, [r7, #16]
  return(result);
 800298c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800298e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002990:	2301      	movs	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f383 8810 	msr	PRIMASK, r3
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4923      	ldr	r1, [pc, #140]	; (8002a34 <UART_WaitOnFlagUntilTimeout+0x184>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f383 8810 	msr	PRIMASK, r3
}
 80029b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b8:	f3ef 8310 	mrs	r3, PRIMASK
 80029bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80029be:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c2:	2301      	movs	r3, #1
 80029c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	438a      	bics	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	2120      	movs	r1, #32
 80029fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2274      	movs	r2, #116	; 0x74
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e010      	b.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	425a      	negs	r2, r3
 8002a1a:	4153      	adcs	r3, r2
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	001a      	movs	r2, r3
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d100      	bne.n	8002a2a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002a28:	e74b      	b.n	80028c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b014      	add	sp, #80	; 0x50
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	fffffe5f 	.word	0xfffffe5f

08002a38 <__errno>:
 8002a38:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <__errno+0x8>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	4770      	bx	lr
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	2000000c 	.word	0x2000000c

08002a44 <__libc_init_array>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	2600      	movs	r6, #0
 8002a48:	4d0c      	ldr	r5, [pc, #48]	; (8002a7c <__libc_init_array+0x38>)
 8002a4a:	4c0d      	ldr	r4, [pc, #52]	; (8002a80 <__libc_init_array+0x3c>)
 8002a4c:	1b64      	subs	r4, r4, r5
 8002a4e:	10a4      	asrs	r4, r4, #2
 8002a50:	42a6      	cmp	r6, r4
 8002a52:	d109      	bne.n	8002a68 <__libc_init_array+0x24>
 8002a54:	2600      	movs	r6, #0
 8002a56:	f000 fd6b 	bl	8003530 <_init>
 8002a5a:	4d0a      	ldr	r5, [pc, #40]	; (8002a84 <__libc_init_array+0x40>)
 8002a5c:	4c0a      	ldr	r4, [pc, #40]	; (8002a88 <__libc_init_array+0x44>)
 8002a5e:	1b64      	subs	r4, r4, r5
 8002a60:	10a4      	asrs	r4, r4, #2
 8002a62:	42a6      	cmp	r6, r4
 8002a64:	d105      	bne.n	8002a72 <__libc_init_array+0x2e>
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
 8002a68:	00b3      	lsls	r3, r6, #2
 8002a6a:	58eb      	ldr	r3, [r5, r3]
 8002a6c:	4798      	blx	r3
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7ee      	b.n	8002a50 <__libc_init_array+0xc>
 8002a72:	00b3      	lsls	r3, r6, #2
 8002a74:	58eb      	ldr	r3, [r5, r3]
 8002a76:	4798      	blx	r3
 8002a78:	3601      	adds	r6, #1
 8002a7a:	e7f2      	b.n	8002a62 <__libc_init_array+0x1e>
 8002a7c:	080035f4 	.word	0x080035f4
 8002a80:	080035f4 	.word	0x080035f4
 8002a84:	080035f4 	.word	0x080035f4
 8002a88:	080035f8 	.word	0x080035f8

08002a8c <memset>:
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	1882      	adds	r2, r0, r2
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d100      	bne.n	8002a96 <memset+0xa>
 8002a94:	4770      	bx	lr
 8002a96:	7019      	strb	r1, [r3, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	e7f9      	b.n	8002a90 <memset+0x4>

08002a9c <_puts_r>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	0005      	movs	r5, r0
 8002aa0:	000e      	movs	r6, r1
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d004      	beq.n	8002ab0 <_puts_r+0x14>
 8002aa6:	6983      	ldr	r3, [r0, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <_puts_r+0x14>
 8002aac:	f000 fa6e 	bl	8002f8c <__sinit>
 8002ab0:	69ab      	ldr	r3, [r5, #24]
 8002ab2:	68ac      	ldr	r4, [r5, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <_puts_r+0x22>
 8002ab8:	0028      	movs	r0, r5
 8002aba:	f000 fa67 	bl	8002f8c <__sinit>
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <_puts_r+0xd8>)
 8002ac0:	429c      	cmp	r4, r3
 8002ac2:	d122      	bne.n	8002b0a <_puts_r+0x6e>
 8002ac4:	686c      	ldr	r4, [r5, #4]
 8002ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ac8:	07db      	lsls	r3, r3, #31
 8002aca:	d405      	bmi.n	8002ad8 <_puts_r+0x3c>
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	059b      	lsls	r3, r3, #22
 8002ad0:	d402      	bmi.n	8002ad8 <_puts_r+0x3c>
 8002ad2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ad4:	f000 fafb 	bl	80030ce <__retarget_lock_acquire_recursive>
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	071b      	lsls	r3, r3, #28
 8002adc:	d502      	bpl.n	8002ae4 <_puts_r+0x48>
 8002ade:	6923      	ldr	r3, [r4, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d129      	bne.n	8002b38 <_puts_r+0x9c>
 8002ae4:	0021      	movs	r1, r4
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	f000 f8aa 	bl	8002c40 <__swsetup_r>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d023      	beq.n	8002b38 <_puts_r+0x9c>
 8002af0:	2501      	movs	r5, #1
 8002af2:	426d      	negs	r5, r5
 8002af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002af6:	07db      	lsls	r3, r3, #31
 8002af8:	d405      	bmi.n	8002b06 <_puts_r+0x6a>
 8002afa:	89a3      	ldrh	r3, [r4, #12]
 8002afc:	059b      	lsls	r3, r3, #22
 8002afe:	d402      	bmi.n	8002b06 <_puts_r+0x6a>
 8002b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b02:	f000 fae5 	bl	80030d0 <__retarget_lock_release_recursive>
 8002b06:	0028      	movs	r0, r5
 8002b08:	bd70      	pop	{r4, r5, r6, pc}
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <_puts_r+0xdc>)
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	d101      	bne.n	8002b14 <_puts_r+0x78>
 8002b10:	68ac      	ldr	r4, [r5, #8]
 8002b12:	e7d8      	b.n	8002ac6 <_puts_r+0x2a>
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <_puts_r+0xe0>)
 8002b16:	429c      	cmp	r4, r3
 8002b18:	d1d5      	bne.n	8002ac6 <_puts_r+0x2a>
 8002b1a:	68ec      	ldr	r4, [r5, #12]
 8002b1c:	e7d3      	b.n	8002ac6 <_puts_r+0x2a>
 8002b1e:	3601      	adds	r6, #1
 8002b20:	60a3      	str	r3, [r4, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	da04      	bge.n	8002b30 <_puts_r+0x94>
 8002b26:	69a2      	ldr	r2, [r4, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	dc16      	bgt.n	8002b5a <_puts_r+0xbe>
 8002b2c:	290a      	cmp	r1, #10
 8002b2e:	d014      	beq.n	8002b5a <_puts_r+0xbe>
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	6022      	str	r2, [r4, #0]
 8002b36:	7019      	strb	r1, [r3, #0]
 8002b38:	68a3      	ldr	r3, [r4, #8]
 8002b3a:	7831      	ldrb	r1, [r6, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	2900      	cmp	r1, #0
 8002b40:	d1ed      	bne.n	8002b1e <_puts_r+0x82>
 8002b42:	60a3      	str	r3, [r4, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da0f      	bge.n	8002b68 <_puts_r+0xcc>
 8002b48:	0028      	movs	r0, r5
 8002b4a:	0022      	movs	r2, r4
 8002b4c:	310a      	adds	r1, #10
 8002b4e:	f000 f821 	bl	8002b94 <__swbuf_r>
 8002b52:	250a      	movs	r5, #10
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	d1cd      	bne.n	8002af4 <_puts_r+0x58>
 8002b58:	e7ca      	b.n	8002af0 <_puts_r+0x54>
 8002b5a:	0022      	movs	r2, r4
 8002b5c:	0028      	movs	r0, r5
 8002b5e:	f000 f819 	bl	8002b94 <__swbuf_r>
 8002b62:	1c43      	adds	r3, r0, #1
 8002b64:	d1e8      	bne.n	8002b38 <_puts_r+0x9c>
 8002b66:	e7c3      	b.n	8002af0 <_puts_r+0x54>
 8002b68:	250a      	movs	r5, #10
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	6022      	str	r2, [r4, #0]
 8002b70:	701d      	strb	r5, [r3, #0]
 8002b72:	e7bf      	b.n	8002af4 <_puts_r+0x58>
 8002b74:	080035b4 	.word	0x080035b4
 8002b78:	080035d4 	.word	0x080035d4
 8002b7c:	08003594 	.word	0x08003594

08002b80 <puts>:
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <puts+0x10>)
 8002b84:	0001      	movs	r1, r0
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	f7ff ff88 	bl	8002a9c <_puts_r>
 8002b8c:	bd10      	pop	{r4, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	2000000c 	.word	0x2000000c

08002b94 <__swbuf_r>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	0005      	movs	r5, r0
 8002b98:	000e      	movs	r6, r1
 8002b9a:	0014      	movs	r4, r2
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d004      	beq.n	8002baa <__swbuf_r+0x16>
 8002ba0:	6983      	ldr	r3, [r0, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <__swbuf_r+0x16>
 8002ba6:	f000 f9f1 	bl	8002f8c <__sinit>
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <__swbuf_r+0xa0>)
 8002bac:	429c      	cmp	r4, r3
 8002bae:	d12e      	bne.n	8002c0e <__swbuf_r+0x7a>
 8002bb0:	686c      	ldr	r4, [r5, #4]
 8002bb2:	69a3      	ldr	r3, [r4, #24]
 8002bb4:	60a3      	str	r3, [r4, #8]
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	071b      	lsls	r3, r3, #28
 8002bba:	d532      	bpl.n	8002c22 <__swbuf_r+0x8e>
 8002bbc:	6923      	ldr	r3, [r4, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d02f      	beq.n	8002c22 <__swbuf_r+0x8e>
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	6922      	ldr	r2, [r4, #16]
 8002bc6:	b2f7      	uxtb	r7, r6
 8002bc8:	1a98      	subs	r0, r3, r2
 8002bca:	6963      	ldr	r3, [r4, #20]
 8002bcc:	b2f6      	uxtb	r6, r6
 8002bce:	4283      	cmp	r3, r0
 8002bd0:	dc05      	bgt.n	8002bde <__swbuf_r+0x4a>
 8002bd2:	0021      	movs	r1, r4
 8002bd4:	0028      	movs	r0, r5
 8002bd6:	f000 f937 	bl	8002e48 <_fflush_r>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d127      	bne.n	8002c2e <__swbuf_r+0x9a>
 8002bde:	68a3      	ldr	r3, [r4, #8]
 8002be0:	3001      	adds	r0, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60a3      	str	r3, [r4, #8]
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	6022      	str	r2, [r4, #0]
 8002bec:	701f      	strb	r7, [r3, #0]
 8002bee:	6963      	ldr	r3, [r4, #20]
 8002bf0:	4283      	cmp	r3, r0
 8002bf2:	d004      	beq.n	8002bfe <__swbuf_r+0x6a>
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	07db      	lsls	r3, r3, #31
 8002bf8:	d507      	bpl.n	8002c0a <__swbuf_r+0x76>
 8002bfa:	2e0a      	cmp	r6, #10
 8002bfc:	d105      	bne.n	8002c0a <__swbuf_r+0x76>
 8002bfe:	0021      	movs	r1, r4
 8002c00:	0028      	movs	r0, r5
 8002c02:	f000 f921 	bl	8002e48 <_fflush_r>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d111      	bne.n	8002c2e <__swbuf_r+0x9a>
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <__swbuf_r+0xa4>)
 8002c10:	429c      	cmp	r4, r3
 8002c12:	d101      	bne.n	8002c18 <__swbuf_r+0x84>
 8002c14:	68ac      	ldr	r4, [r5, #8]
 8002c16:	e7cc      	b.n	8002bb2 <__swbuf_r+0x1e>
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <__swbuf_r+0xa8>)
 8002c1a:	429c      	cmp	r4, r3
 8002c1c:	d1c9      	bne.n	8002bb2 <__swbuf_r+0x1e>
 8002c1e:	68ec      	ldr	r4, [r5, #12]
 8002c20:	e7c7      	b.n	8002bb2 <__swbuf_r+0x1e>
 8002c22:	0021      	movs	r1, r4
 8002c24:	0028      	movs	r0, r5
 8002c26:	f000 f80b 	bl	8002c40 <__swsetup_r>
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d0c9      	beq.n	8002bc2 <__swbuf_r+0x2e>
 8002c2e:	2601      	movs	r6, #1
 8002c30:	4276      	negs	r6, r6
 8002c32:	e7ea      	b.n	8002c0a <__swbuf_r+0x76>
 8002c34:	080035b4 	.word	0x080035b4
 8002c38:	080035d4 	.word	0x080035d4
 8002c3c:	08003594 	.word	0x08003594

08002c40 <__swsetup_r>:
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <__swsetup_r+0xe0>)
 8002c42:	b570      	push	{r4, r5, r6, lr}
 8002c44:	681d      	ldr	r5, [r3, #0]
 8002c46:	0006      	movs	r6, r0
 8002c48:	000c      	movs	r4, r1
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	d005      	beq.n	8002c5a <__swsetup_r+0x1a>
 8002c4e:	69ab      	ldr	r3, [r5, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <__swsetup_r+0x1a>
 8002c54:	0028      	movs	r0, r5
 8002c56:	f000 f999 	bl	8002f8c <__sinit>
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <__swsetup_r+0xe4>)
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	d10f      	bne.n	8002c80 <__swsetup_r+0x40>
 8002c60:	686c      	ldr	r4, [r5, #4]
 8002c62:	230c      	movs	r3, #12
 8002c64:	5ee2      	ldrsh	r2, [r4, r3]
 8002c66:	b293      	uxth	r3, r2
 8002c68:	0711      	lsls	r1, r2, #28
 8002c6a:	d42d      	bmi.n	8002cc8 <__swsetup_r+0x88>
 8002c6c:	06d9      	lsls	r1, r3, #27
 8002c6e:	d411      	bmi.n	8002c94 <__swsetup_r+0x54>
 8002c70:	2309      	movs	r3, #9
 8002c72:	2001      	movs	r0, #1
 8002c74:	6033      	str	r3, [r6, #0]
 8002c76:	3337      	adds	r3, #55	; 0x37
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	81a3      	strh	r3, [r4, #12]
 8002c7c:	4240      	negs	r0, r0
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <__swsetup_r+0xe8>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	d101      	bne.n	8002c8a <__swsetup_r+0x4a>
 8002c86:	68ac      	ldr	r4, [r5, #8]
 8002c88:	e7eb      	b.n	8002c62 <__swsetup_r+0x22>
 8002c8a:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <__swsetup_r+0xec>)
 8002c8c:	429c      	cmp	r4, r3
 8002c8e:	d1e8      	bne.n	8002c62 <__swsetup_r+0x22>
 8002c90:	68ec      	ldr	r4, [r5, #12]
 8002c92:	e7e6      	b.n	8002c62 <__swsetup_r+0x22>
 8002c94:	075b      	lsls	r3, r3, #29
 8002c96:	d513      	bpl.n	8002cc0 <__swsetup_r+0x80>
 8002c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c9a:	2900      	cmp	r1, #0
 8002c9c:	d008      	beq.n	8002cb0 <__swsetup_r+0x70>
 8002c9e:	0023      	movs	r3, r4
 8002ca0:	3344      	adds	r3, #68	; 0x44
 8002ca2:	4299      	cmp	r1, r3
 8002ca4:	d002      	beq.n	8002cac <__swsetup_r+0x6c>
 8002ca6:	0030      	movs	r0, r6
 8002ca8:	f000 fa80 	bl	80031ac <_free_r>
 8002cac:	2300      	movs	r3, #0
 8002cae:	6363      	str	r3, [r4, #52]	; 0x34
 8002cb0:	2224      	movs	r2, #36	; 0x24
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	6063      	str	r3, [r4, #4]
 8002cbc:	6923      	ldr	r3, [r4, #16]
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	89a2      	ldrh	r2, [r4, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	81a3      	strh	r3, [r4, #12]
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <__swsetup_r+0xa6>
 8002cce:	21a0      	movs	r1, #160	; 0xa0
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	0089      	lsls	r1, r1, #2
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	400b      	ands	r3, r1
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <__swsetup_r+0xa6>
 8002cde:	0021      	movs	r1, r4
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	f000 fa1f 	bl	8003124 <__smakebuf_r>
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	5ea3      	ldrsh	r3, [r4, r2]
 8002cea:	2001      	movs	r0, #1
 8002cec:	001a      	movs	r2, r3
 8002cee:	b299      	uxth	r1, r3
 8002cf0:	4002      	ands	r2, r0
 8002cf2:	4203      	tst	r3, r0
 8002cf4:	d00f      	beq.n	8002d16 <__swsetup_r+0xd6>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60a2      	str	r2, [r4, #8]
 8002cfa:	6962      	ldr	r2, [r4, #20]
 8002cfc:	4252      	negs	r2, r2
 8002cfe:	61a2      	str	r2, [r4, #24]
 8002d00:	2000      	movs	r0, #0
 8002d02:	6922      	ldr	r2, [r4, #16]
 8002d04:	4282      	cmp	r2, r0
 8002d06:	d1ba      	bne.n	8002c7e <__swsetup_r+0x3e>
 8002d08:	060a      	lsls	r2, r1, #24
 8002d0a:	d5b8      	bpl.n	8002c7e <__swsetup_r+0x3e>
 8002d0c:	2240      	movs	r2, #64	; 0x40
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	81a3      	strh	r3, [r4, #12]
 8002d12:	3801      	subs	r0, #1
 8002d14:	e7b3      	b.n	8002c7e <__swsetup_r+0x3e>
 8002d16:	0788      	lsls	r0, r1, #30
 8002d18:	d400      	bmi.n	8002d1c <__swsetup_r+0xdc>
 8002d1a:	6962      	ldr	r2, [r4, #20]
 8002d1c:	60a2      	str	r2, [r4, #8]
 8002d1e:	e7ef      	b.n	8002d00 <__swsetup_r+0xc0>
 8002d20:	2000000c 	.word	0x2000000c
 8002d24:	080035b4 	.word	0x080035b4
 8002d28:	080035d4 	.word	0x080035d4
 8002d2c:	08003594 	.word	0x08003594

08002d30 <__sflush_r>:
 8002d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d32:	898b      	ldrh	r3, [r1, #12]
 8002d34:	0005      	movs	r5, r0
 8002d36:	000c      	movs	r4, r1
 8002d38:	071a      	lsls	r2, r3, #28
 8002d3a:	d45f      	bmi.n	8002dfc <__sflush_r+0xcc>
 8002d3c:	684a      	ldr	r2, [r1, #4]
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	dc04      	bgt.n	8002d4c <__sflush_r+0x1c>
 8002d42:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002d44:	2a00      	cmp	r2, #0
 8002d46:	dc01      	bgt.n	8002d4c <__sflush_r+0x1c>
 8002d48:	2000      	movs	r0, #0
 8002d4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002d4e:	2f00      	cmp	r7, #0
 8002d50:	d0fa      	beq.n	8002d48 <__sflush_r+0x18>
 8002d52:	2200      	movs	r2, #0
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	682e      	ldr	r6, [r5, #0]
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	0149      	lsls	r1, r1, #5
 8002d5e:	400a      	ands	r2, r1
 8002d60:	420b      	tst	r3, r1
 8002d62:	d034      	beq.n	8002dce <__sflush_r+0x9e>
 8002d64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	075b      	lsls	r3, r3, #29
 8002d6a:	d506      	bpl.n	8002d7a <__sflush_r+0x4a>
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	1ac0      	subs	r0, r0, r3
 8002d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <__sflush_r+0x4a>
 8002d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d78:	1ac0      	subs	r0, r0, r3
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	6a21      	ldr	r1, [r4, #32]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	0028      	movs	r0, r5
 8002d82:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002d84:	47b8      	blx	r7
 8002d86:	89a1      	ldrh	r1, [r4, #12]
 8002d88:	1c43      	adds	r3, r0, #1
 8002d8a:	d106      	bne.n	8002d9a <__sflush_r+0x6a>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	2b1d      	cmp	r3, #29
 8002d90:	d831      	bhi.n	8002df6 <__sflush_r+0xc6>
 8002d92:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <__sflush_r+0x114>)
 8002d94:	40da      	lsrs	r2, r3
 8002d96:	07d3      	lsls	r3, r2, #31
 8002d98:	d52d      	bpl.n	8002df6 <__sflush_r+0xc6>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	6923      	ldr	r3, [r4, #16]
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	04cb      	lsls	r3, r1, #19
 8002da4:	d505      	bpl.n	8002db2 <__sflush_r+0x82>
 8002da6:	1c43      	adds	r3, r0, #1
 8002da8:	d102      	bne.n	8002db0 <__sflush_r+0x80>
 8002daa:	682b      	ldr	r3, [r5, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d100      	bne.n	8002db2 <__sflush_r+0x82>
 8002db0:	6560      	str	r0, [r4, #84]	; 0x54
 8002db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002db4:	602e      	str	r6, [r5, #0]
 8002db6:	2900      	cmp	r1, #0
 8002db8:	d0c6      	beq.n	8002d48 <__sflush_r+0x18>
 8002dba:	0023      	movs	r3, r4
 8002dbc:	3344      	adds	r3, #68	; 0x44
 8002dbe:	4299      	cmp	r1, r3
 8002dc0:	d002      	beq.n	8002dc8 <__sflush_r+0x98>
 8002dc2:	0028      	movs	r0, r5
 8002dc4:	f000 f9f2 	bl	80031ac <_free_r>
 8002dc8:	2000      	movs	r0, #0
 8002dca:	6360      	str	r0, [r4, #52]	; 0x34
 8002dcc:	e7bd      	b.n	8002d4a <__sflush_r+0x1a>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	0028      	movs	r0, r5
 8002dd2:	6a21      	ldr	r1, [r4, #32]
 8002dd4:	47b8      	blx	r7
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	d1c5      	bne.n	8002d66 <__sflush_r+0x36>
 8002dda:	682b      	ldr	r3, [r5, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0c2      	beq.n	8002d66 <__sflush_r+0x36>
 8002de0:	2b1d      	cmp	r3, #29
 8002de2:	d001      	beq.n	8002de8 <__sflush_r+0xb8>
 8002de4:	2b16      	cmp	r3, #22
 8002de6:	d101      	bne.n	8002dec <__sflush_r+0xbc>
 8002de8:	602e      	str	r6, [r5, #0]
 8002dea:	e7ad      	b.n	8002d48 <__sflush_r+0x18>
 8002dec:	2340      	movs	r3, #64	; 0x40
 8002dee:	89a2      	ldrh	r2, [r4, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	81a3      	strh	r3, [r4, #12]
 8002df4:	e7a9      	b.n	8002d4a <__sflush_r+0x1a>
 8002df6:	2340      	movs	r3, #64	; 0x40
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	e7fa      	b.n	8002df2 <__sflush_r+0xc2>
 8002dfc:	690f      	ldr	r7, [r1, #16]
 8002dfe:	2f00      	cmp	r7, #0
 8002e00:	d0a2      	beq.n	8002d48 <__sflush_r+0x18>
 8002e02:	680a      	ldr	r2, [r1, #0]
 8002e04:	600f      	str	r7, [r1, #0]
 8002e06:	1bd2      	subs	r2, r2, r7
 8002e08:	9201      	str	r2, [sp, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	079b      	lsls	r3, r3, #30
 8002e0e:	d100      	bne.n	8002e12 <__sflush_r+0xe2>
 8002e10:	694a      	ldr	r2, [r1, #20]
 8002e12:	60a2      	str	r2, [r4, #8]
 8002e14:	9b01      	ldr	r3, [sp, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	dc00      	bgt.n	8002e1c <__sflush_r+0xec>
 8002e1a:	e795      	b.n	8002d48 <__sflush_r+0x18>
 8002e1c:	003a      	movs	r2, r7
 8002e1e:	0028      	movs	r0, r5
 8002e20:	9b01      	ldr	r3, [sp, #4]
 8002e22:	6a21      	ldr	r1, [r4, #32]
 8002e24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e26:	47b0      	blx	r6
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	dc06      	bgt.n	8002e3a <__sflush_r+0x10a>
 8002e2c:	2340      	movs	r3, #64	; 0x40
 8002e2e:	2001      	movs	r0, #1
 8002e30:	89a2      	ldrh	r2, [r4, #12]
 8002e32:	4240      	negs	r0, r0
 8002e34:	4313      	orrs	r3, r2
 8002e36:	81a3      	strh	r3, [r4, #12]
 8002e38:	e787      	b.n	8002d4a <__sflush_r+0x1a>
 8002e3a:	9b01      	ldr	r3, [sp, #4]
 8002e3c:	183f      	adds	r7, r7, r0
 8002e3e:	1a1b      	subs	r3, r3, r0
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	e7e7      	b.n	8002e14 <__sflush_r+0xe4>
 8002e44:	20400001 	.word	0x20400001

08002e48 <_fflush_r>:
 8002e48:	690b      	ldr	r3, [r1, #16]
 8002e4a:	b570      	push	{r4, r5, r6, lr}
 8002e4c:	0005      	movs	r5, r0
 8002e4e:	000c      	movs	r4, r1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <_fflush_r+0x12>
 8002e54:	2500      	movs	r5, #0
 8002e56:	0028      	movs	r0, r5
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d004      	beq.n	8002e68 <_fflush_r+0x20>
 8002e5e:	6983      	ldr	r3, [r0, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <_fflush_r+0x20>
 8002e64:	f000 f892 	bl	8002f8c <__sinit>
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <_fflush_r+0x74>)
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	d11b      	bne.n	8002ea6 <_fflush_r+0x5e>
 8002e6e:	686c      	ldr	r4, [r5, #4]
 8002e70:	220c      	movs	r2, #12
 8002e72:	5ea3      	ldrsh	r3, [r4, r2]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ed      	beq.n	8002e54 <_fflush_r+0xc>
 8002e78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e7a:	07d2      	lsls	r2, r2, #31
 8002e7c:	d404      	bmi.n	8002e88 <_fflush_r+0x40>
 8002e7e:	059b      	lsls	r3, r3, #22
 8002e80:	d402      	bmi.n	8002e88 <_fflush_r+0x40>
 8002e82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e84:	f000 f923 	bl	80030ce <__retarget_lock_acquire_recursive>
 8002e88:	0028      	movs	r0, r5
 8002e8a:	0021      	movs	r1, r4
 8002e8c:	f7ff ff50 	bl	8002d30 <__sflush_r>
 8002e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e92:	0005      	movs	r5, r0
 8002e94:	07db      	lsls	r3, r3, #31
 8002e96:	d4de      	bmi.n	8002e56 <_fflush_r+0xe>
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	059b      	lsls	r3, r3, #22
 8002e9c:	d4db      	bmi.n	8002e56 <_fflush_r+0xe>
 8002e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ea0:	f000 f916 	bl	80030d0 <__retarget_lock_release_recursive>
 8002ea4:	e7d7      	b.n	8002e56 <_fflush_r+0xe>
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <_fflush_r+0x78>)
 8002ea8:	429c      	cmp	r4, r3
 8002eaa:	d101      	bne.n	8002eb0 <_fflush_r+0x68>
 8002eac:	68ac      	ldr	r4, [r5, #8]
 8002eae:	e7df      	b.n	8002e70 <_fflush_r+0x28>
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <_fflush_r+0x7c>)
 8002eb2:	429c      	cmp	r4, r3
 8002eb4:	d1dc      	bne.n	8002e70 <_fflush_r+0x28>
 8002eb6:	68ec      	ldr	r4, [r5, #12]
 8002eb8:	e7da      	b.n	8002e70 <_fflush_r+0x28>
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	080035b4 	.word	0x080035b4
 8002ec0:	080035d4 	.word	0x080035d4
 8002ec4:	08003594 	.word	0x08003594

08002ec8 <std>:
 8002ec8:	2300      	movs	r3, #0
 8002eca:	b510      	push	{r4, lr}
 8002ecc:	0004      	movs	r4, r0
 8002ece:	6003      	str	r3, [r0, #0]
 8002ed0:	6043      	str	r3, [r0, #4]
 8002ed2:	6083      	str	r3, [r0, #8]
 8002ed4:	8181      	strh	r1, [r0, #12]
 8002ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ed8:	0019      	movs	r1, r3
 8002eda:	81c2      	strh	r2, [r0, #14]
 8002edc:	6103      	str	r3, [r0, #16]
 8002ede:	6143      	str	r3, [r0, #20]
 8002ee0:	6183      	str	r3, [r0, #24]
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	305c      	adds	r0, #92	; 0x5c
 8002ee6:	f7ff fdd1 	bl	8002a8c <memset>
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <std+0x38>)
 8002eec:	6224      	str	r4, [r4, #32]
 8002eee:	6263      	str	r3, [r4, #36]	; 0x24
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <std+0x3c>)
 8002ef2:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <std+0x40>)
 8002ef6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <std+0x44>)
 8002efa:	6323      	str	r3, [r4, #48]	; 0x30
 8002efc:	bd10      	pop	{r4, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	08003395 	.word	0x08003395
 8002f04:	080033bd 	.word	0x080033bd
 8002f08:	080033f5 	.word	0x080033f5
 8002f0c:	08003421 	.word	0x08003421

08002f10 <_cleanup_r>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	4902      	ldr	r1, [pc, #8]	; (8002f1c <_cleanup_r+0xc>)
 8002f14:	f000 f8ba 	bl	800308c <_fwalk_reent>
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	08002e49 	.word	0x08002e49

08002f20 <__sfmoreglue>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	2568      	movs	r5, #104	; 0x68
 8002f24:	1e4a      	subs	r2, r1, #1
 8002f26:	4355      	muls	r5, r2
 8002f28:	000e      	movs	r6, r1
 8002f2a:	0029      	movs	r1, r5
 8002f2c:	3174      	adds	r1, #116	; 0x74
 8002f2e:	f000 f9a9 	bl	8003284 <_malloc_r>
 8002f32:	1e04      	subs	r4, r0, #0
 8002f34:	d008      	beq.n	8002f48 <__sfmoreglue+0x28>
 8002f36:	2100      	movs	r1, #0
 8002f38:	002a      	movs	r2, r5
 8002f3a:	6001      	str	r1, [r0, #0]
 8002f3c:	6046      	str	r6, [r0, #4]
 8002f3e:	300c      	adds	r0, #12
 8002f40:	60a0      	str	r0, [r4, #8]
 8002f42:	3268      	adds	r2, #104	; 0x68
 8002f44:	f7ff fda2 	bl	8002a8c <memset>
 8002f48:	0020      	movs	r0, r4
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}

08002f4c <__sfp_lock_acquire>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4802      	ldr	r0, [pc, #8]	; (8002f58 <__sfp_lock_acquire+0xc>)
 8002f50:	f000 f8bd 	bl	80030ce <__retarget_lock_acquire_recursive>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	200001bd 	.word	0x200001bd

08002f5c <__sfp_lock_release>:
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	4802      	ldr	r0, [pc, #8]	; (8002f68 <__sfp_lock_release+0xc>)
 8002f60:	f000 f8b6 	bl	80030d0 <__retarget_lock_release_recursive>
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	200001bd 	.word	0x200001bd

08002f6c <__sinit_lock_acquire>:
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4802      	ldr	r0, [pc, #8]	; (8002f78 <__sinit_lock_acquire+0xc>)
 8002f70:	f000 f8ad 	bl	80030ce <__retarget_lock_acquire_recursive>
 8002f74:	bd10      	pop	{r4, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	200001be 	.word	0x200001be

08002f7c <__sinit_lock_release>:
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4802      	ldr	r0, [pc, #8]	; (8002f88 <__sinit_lock_release+0xc>)
 8002f80:	f000 f8a6 	bl	80030d0 <__retarget_lock_release_recursive>
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	200001be 	.word	0x200001be

08002f8c <__sinit>:
 8002f8c:	b513      	push	{r0, r1, r4, lr}
 8002f8e:	0004      	movs	r4, r0
 8002f90:	f7ff ffec 	bl	8002f6c <__sinit_lock_acquire>
 8002f94:	69a3      	ldr	r3, [r4, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <__sinit+0x14>
 8002f9a:	f7ff ffef 	bl	8002f7c <__sinit_lock_release>
 8002f9e:	bd13      	pop	{r0, r1, r4, pc}
 8002fa0:	64a3      	str	r3, [r4, #72]	; 0x48
 8002fa2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <__sinit+0x68>)
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <__sinit+0x6c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	d101      	bne.n	8002fb8 <__sinit+0x2c>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	61a3      	str	r3, [r4, #24]
 8002fb8:	0020      	movs	r0, r4
 8002fba:	f000 f81f 	bl	8002ffc <__sfp>
 8002fbe:	6060      	str	r0, [r4, #4]
 8002fc0:	0020      	movs	r0, r4
 8002fc2:	f000 f81b 	bl	8002ffc <__sfp>
 8002fc6:	60a0      	str	r0, [r4, #8]
 8002fc8:	0020      	movs	r0, r4
 8002fca:	f000 f817 	bl	8002ffc <__sfp>
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	60e0      	str	r0, [r4, #12]
 8002fd4:	6860      	ldr	r0, [r4, #4]
 8002fd6:	f7ff ff77 	bl	8002ec8 <std>
 8002fda:	2201      	movs	r2, #1
 8002fdc:	2109      	movs	r1, #9
 8002fde:	68a0      	ldr	r0, [r4, #8]
 8002fe0:	f7ff ff72 	bl	8002ec8 <std>
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	2112      	movs	r1, #18
 8002fe8:	68e0      	ldr	r0, [r4, #12]
 8002fea:	f7ff ff6d 	bl	8002ec8 <std>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61a3      	str	r3, [r4, #24]
 8002ff2:	e7d2      	b.n	8002f9a <__sinit+0xe>
 8002ff4:	08003590 	.word	0x08003590
 8002ff8:	08002f11 	.word	0x08002f11

08002ffc <__sfp>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	0007      	movs	r7, r0
 8003000:	f7ff ffa4 	bl	8002f4c <__sfp_lock_acquire>
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <__sfp+0x88>)
 8003006:	681e      	ldr	r6, [r3, #0]
 8003008:	69b3      	ldr	r3, [r6, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <__sfp+0x18>
 800300e:	0030      	movs	r0, r6
 8003010:	f7ff ffbc 	bl	8002f8c <__sinit>
 8003014:	3648      	adds	r6, #72	; 0x48
 8003016:	68b4      	ldr	r4, [r6, #8]
 8003018:	6873      	ldr	r3, [r6, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	d504      	bpl.n	8003028 <__sfp+0x2c>
 800301e:	6833      	ldr	r3, [r6, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d022      	beq.n	800306a <__sfp+0x6e>
 8003024:	6836      	ldr	r6, [r6, #0]
 8003026:	e7f6      	b.n	8003016 <__sfp+0x1a>
 8003028:	220c      	movs	r2, #12
 800302a:	5ea5      	ldrsh	r5, [r4, r2]
 800302c:	2d00      	cmp	r5, #0
 800302e:	d11a      	bne.n	8003066 <__sfp+0x6a>
 8003030:	0020      	movs	r0, r4
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <__sfp+0x8c>)
 8003034:	3058      	adds	r0, #88	; 0x58
 8003036:	60e3      	str	r3, [r4, #12]
 8003038:	6665      	str	r5, [r4, #100]	; 0x64
 800303a:	f000 f847 	bl	80030cc <__retarget_lock_init_recursive>
 800303e:	f7ff ff8d 	bl	8002f5c <__sfp_lock_release>
 8003042:	0020      	movs	r0, r4
 8003044:	2208      	movs	r2, #8
 8003046:	0029      	movs	r1, r5
 8003048:	6025      	str	r5, [r4, #0]
 800304a:	60a5      	str	r5, [r4, #8]
 800304c:	6065      	str	r5, [r4, #4]
 800304e:	6125      	str	r5, [r4, #16]
 8003050:	6165      	str	r5, [r4, #20]
 8003052:	61a5      	str	r5, [r4, #24]
 8003054:	305c      	adds	r0, #92	; 0x5c
 8003056:	f7ff fd19 	bl	8002a8c <memset>
 800305a:	6365      	str	r5, [r4, #52]	; 0x34
 800305c:	63a5      	str	r5, [r4, #56]	; 0x38
 800305e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003060:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003062:	0020      	movs	r0, r4
 8003064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003066:	3468      	adds	r4, #104	; 0x68
 8003068:	e7d7      	b.n	800301a <__sfp+0x1e>
 800306a:	2104      	movs	r1, #4
 800306c:	0038      	movs	r0, r7
 800306e:	f7ff ff57 	bl	8002f20 <__sfmoreglue>
 8003072:	1e04      	subs	r4, r0, #0
 8003074:	6030      	str	r0, [r6, #0]
 8003076:	d1d5      	bne.n	8003024 <__sfp+0x28>
 8003078:	f7ff ff70 	bl	8002f5c <__sfp_lock_release>
 800307c:	230c      	movs	r3, #12
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	e7ef      	b.n	8003062 <__sfp+0x66>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	08003590 	.word	0x08003590
 8003088:	ffff0001 	.word	0xffff0001

0800308c <_fwalk_reent>:
 800308c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800308e:	0004      	movs	r4, r0
 8003090:	0006      	movs	r6, r0
 8003092:	2700      	movs	r7, #0
 8003094:	9101      	str	r1, [sp, #4]
 8003096:	3448      	adds	r4, #72	; 0x48
 8003098:	6863      	ldr	r3, [r4, #4]
 800309a:	68a5      	ldr	r5, [r4, #8]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	9b00      	ldr	r3, [sp, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	d504      	bpl.n	80030b0 <_fwalk_reent+0x24>
 80030a6:	6824      	ldr	r4, [r4, #0]
 80030a8:	2c00      	cmp	r4, #0
 80030aa:	d1f5      	bne.n	8003098 <_fwalk_reent+0xc>
 80030ac:	0038      	movs	r0, r7
 80030ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030b0:	89ab      	ldrh	r3, [r5, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d908      	bls.n	80030c8 <_fwalk_reent+0x3c>
 80030b6:	220e      	movs	r2, #14
 80030b8:	5eab      	ldrsh	r3, [r5, r2]
 80030ba:	3301      	adds	r3, #1
 80030bc:	d004      	beq.n	80030c8 <_fwalk_reent+0x3c>
 80030be:	0029      	movs	r1, r5
 80030c0:	0030      	movs	r0, r6
 80030c2:	9b01      	ldr	r3, [sp, #4]
 80030c4:	4798      	blx	r3
 80030c6:	4307      	orrs	r7, r0
 80030c8:	3568      	adds	r5, #104	; 0x68
 80030ca:	e7e8      	b.n	800309e <_fwalk_reent+0x12>

080030cc <__retarget_lock_init_recursive>:
 80030cc:	4770      	bx	lr

080030ce <__retarget_lock_acquire_recursive>:
 80030ce:	4770      	bx	lr

080030d0 <__retarget_lock_release_recursive>:
 80030d0:	4770      	bx	lr
	...

080030d4 <__swhatbuf_r>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	000e      	movs	r6, r1
 80030d8:	001d      	movs	r5, r3
 80030da:	230e      	movs	r3, #14
 80030dc:	5ec9      	ldrsh	r1, [r1, r3]
 80030de:	0014      	movs	r4, r2
 80030e0:	b096      	sub	sp, #88	; 0x58
 80030e2:	2900      	cmp	r1, #0
 80030e4:	da08      	bge.n	80030f8 <__swhatbuf_r+0x24>
 80030e6:	220c      	movs	r2, #12
 80030e8:	5eb3      	ldrsh	r3, [r6, r2]
 80030ea:	2200      	movs	r2, #0
 80030ec:	602a      	str	r2, [r5, #0]
 80030ee:	061b      	lsls	r3, r3, #24
 80030f0:	d411      	bmi.n	8003116 <__swhatbuf_r+0x42>
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	e00f      	b.n	8003118 <__swhatbuf_r+0x44>
 80030f8:	466a      	mov	r2, sp
 80030fa:	f000 f9bd 	bl	8003478 <_fstat_r>
 80030fe:	2800      	cmp	r0, #0
 8003100:	dbf1      	blt.n	80030e6 <__swhatbuf_r+0x12>
 8003102:	23f0      	movs	r3, #240	; 0xf0
 8003104:	9901      	ldr	r1, [sp, #4]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	4019      	ands	r1, r3
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <__swhatbuf_r+0x4c>)
 800310c:	18c9      	adds	r1, r1, r3
 800310e:	424b      	negs	r3, r1
 8003110:	4159      	adcs	r1, r3
 8003112:	6029      	str	r1, [r5, #0]
 8003114:	e7ed      	b.n	80030f2 <__swhatbuf_r+0x1e>
 8003116:	2340      	movs	r3, #64	; 0x40
 8003118:	2000      	movs	r0, #0
 800311a:	6023      	str	r3, [r4, #0]
 800311c:	b016      	add	sp, #88	; 0x58
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	ffffe000 	.word	0xffffe000

08003124 <__smakebuf_r>:
 8003124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003126:	2602      	movs	r6, #2
 8003128:	898b      	ldrh	r3, [r1, #12]
 800312a:	0005      	movs	r5, r0
 800312c:	000c      	movs	r4, r1
 800312e:	4233      	tst	r3, r6
 8003130:	d006      	beq.n	8003140 <__smakebuf_r+0x1c>
 8003132:	0023      	movs	r3, r4
 8003134:	3347      	adds	r3, #71	; 0x47
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	6123      	str	r3, [r4, #16]
 800313a:	2301      	movs	r3, #1
 800313c:	6163      	str	r3, [r4, #20]
 800313e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003140:	466a      	mov	r2, sp
 8003142:	ab01      	add	r3, sp, #4
 8003144:	f7ff ffc6 	bl	80030d4 <__swhatbuf_r>
 8003148:	9900      	ldr	r1, [sp, #0]
 800314a:	0007      	movs	r7, r0
 800314c:	0028      	movs	r0, r5
 800314e:	f000 f899 	bl	8003284 <_malloc_r>
 8003152:	2800      	cmp	r0, #0
 8003154:	d108      	bne.n	8003168 <__smakebuf_r+0x44>
 8003156:	220c      	movs	r2, #12
 8003158:	5ea3      	ldrsh	r3, [r4, r2]
 800315a:	059a      	lsls	r2, r3, #22
 800315c:	d4ef      	bmi.n	800313e <__smakebuf_r+0x1a>
 800315e:	2203      	movs	r2, #3
 8003160:	4393      	bics	r3, r2
 8003162:	431e      	orrs	r6, r3
 8003164:	81a6      	strh	r6, [r4, #12]
 8003166:	e7e4      	b.n	8003132 <__smakebuf_r+0xe>
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <__smakebuf_r+0x84>)
 800316a:	62ab      	str	r3, [r5, #40]	; 0x28
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	89a2      	ldrh	r2, [r4, #12]
 8003170:	6020      	str	r0, [r4, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	81a3      	strh	r3, [r4, #12]
 8003176:	9b00      	ldr	r3, [sp, #0]
 8003178:	6120      	str	r0, [r4, #16]
 800317a:	6163      	str	r3, [r4, #20]
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <__smakebuf_r+0x7a>
 8003182:	0028      	movs	r0, r5
 8003184:	230e      	movs	r3, #14
 8003186:	5ee1      	ldrsh	r1, [r4, r3]
 8003188:	f000 f988 	bl	800349c <_isatty_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	d006      	beq.n	800319e <__smakebuf_r+0x7a>
 8003190:	2203      	movs	r2, #3
 8003192:	89a3      	ldrh	r3, [r4, #12]
 8003194:	4393      	bics	r3, r2
 8003196:	001a      	movs	r2, r3
 8003198:	2301      	movs	r3, #1
 800319a:	4313      	orrs	r3, r2
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	89a0      	ldrh	r0, [r4, #12]
 80031a0:	4307      	orrs	r7, r0
 80031a2:	81a7      	strh	r7, [r4, #12]
 80031a4:	e7cb      	b.n	800313e <__smakebuf_r+0x1a>
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	08002f11 	.word	0x08002f11

080031ac <_free_r>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	0005      	movs	r5, r0
 80031b0:	2900      	cmp	r1, #0
 80031b2:	d010      	beq.n	80031d6 <_free_r+0x2a>
 80031b4:	1f0c      	subs	r4, r1, #4
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da00      	bge.n	80031be <_free_r+0x12>
 80031bc:	18e4      	adds	r4, r4, r3
 80031be:	0028      	movs	r0, r5
 80031c0:	f000 f992 	bl	80034e8 <__malloc_lock>
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <_free_r+0x90>)
 80031c6:	6813      	ldr	r3, [r2, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <_free_r+0x2c>
 80031cc:	6063      	str	r3, [r4, #4]
 80031ce:	6014      	str	r4, [r2, #0]
 80031d0:	0028      	movs	r0, r5
 80031d2:	f000 f991 	bl	80034f8 <__malloc_unlock>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	42a3      	cmp	r3, r4
 80031da:	d908      	bls.n	80031ee <_free_r+0x42>
 80031dc:	6821      	ldr	r1, [r4, #0]
 80031de:	1860      	adds	r0, r4, r1
 80031e0:	4283      	cmp	r3, r0
 80031e2:	d1f3      	bne.n	80031cc <_free_r+0x20>
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	1841      	adds	r1, r0, r1
 80031ea:	6021      	str	r1, [r4, #0]
 80031ec:	e7ee      	b.n	80031cc <_free_r+0x20>
 80031ee:	001a      	movs	r2, r3
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <_free_r+0x4e>
 80031f6:	42a3      	cmp	r3, r4
 80031f8:	d9f9      	bls.n	80031ee <_free_r+0x42>
 80031fa:	6811      	ldr	r1, [r2, #0]
 80031fc:	1850      	adds	r0, r2, r1
 80031fe:	42a0      	cmp	r0, r4
 8003200:	d10b      	bne.n	800321a <_free_r+0x6e>
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	1809      	adds	r1, r1, r0
 8003206:	1850      	adds	r0, r2, r1
 8003208:	6011      	str	r1, [r2, #0]
 800320a:	4283      	cmp	r3, r0
 800320c:	d1e0      	bne.n	80031d0 <_free_r+0x24>
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	1841      	adds	r1, r0, r1
 8003214:	6011      	str	r1, [r2, #0]
 8003216:	6053      	str	r3, [r2, #4]
 8003218:	e7da      	b.n	80031d0 <_free_r+0x24>
 800321a:	42a0      	cmp	r0, r4
 800321c:	d902      	bls.n	8003224 <_free_r+0x78>
 800321e:	230c      	movs	r3, #12
 8003220:	602b      	str	r3, [r5, #0]
 8003222:	e7d5      	b.n	80031d0 <_free_r+0x24>
 8003224:	6821      	ldr	r1, [r4, #0]
 8003226:	1860      	adds	r0, r4, r1
 8003228:	4283      	cmp	r3, r0
 800322a:	d103      	bne.n	8003234 <_free_r+0x88>
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	1841      	adds	r1, r0, r1
 8003232:	6021      	str	r1, [r4, #0]
 8003234:	6063      	str	r3, [r4, #4]
 8003236:	6054      	str	r4, [r2, #4]
 8003238:	e7ca      	b.n	80031d0 <_free_r+0x24>
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	200001c0 	.word	0x200001c0

08003240 <sbrk_aligned>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	4e0f      	ldr	r6, [pc, #60]	; (8003280 <sbrk_aligned+0x40>)
 8003244:	000d      	movs	r5, r1
 8003246:	6831      	ldr	r1, [r6, #0]
 8003248:	0004      	movs	r4, r0
 800324a:	2900      	cmp	r1, #0
 800324c:	d102      	bne.n	8003254 <sbrk_aligned+0x14>
 800324e:	f000 f88f 	bl	8003370 <_sbrk_r>
 8003252:	6030      	str	r0, [r6, #0]
 8003254:	0029      	movs	r1, r5
 8003256:	0020      	movs	r0, r4
 8003258:	f000 f88a 	bl	8003370 <_sbrk_r>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d00a      	beq.n	8003276 <sbrk_aligned+0x36>
 8003260:	2303      	movs	r3, #3
 8003262:	1cc5      	adds	r5, r0, #3
 8003264:	439d      	bics	r5, r3
 8003266:	42a8      	cmp	r0, r5
 8003268:	d007      	beq.n	800327a <sbrk_aligned+0x3a>
 800326a:	1a29      	subs	r1, r5, r0
 800326c:	0020      	movs	r0, r4
 800326e:	f000 f87f 	bl	8003370 <_sbrk_r>
 8003272:	1c43      	adds	r3, r0, #1
 8003274:	d101      	bne.n	800327a <sbrk_aligned+0x3a>
 8003276:	2501      	movs	r5, #1
 8003278:	426d      	negs	r5, r5
 800327a:	0028      	movs	r0, r5
 800327c:	bd70      	pop	{r4, r5, r6, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	200001c4 	.word	0x200001c4

08003284 <_malloc_r>:
 8003284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003286:	2203      	movs	r2, #3
 8003288:	1ccb      	adds	r3, r1, #3
 800328a:	4393      	bics	r3, r2
 800328c:	3308      	adds	r3, #8
 800328e:	0006      	movs	r6, r0
 8003290:	001f      	movs	r7, r3
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d232      	bcs.n	80032fc <_malloc_r+0x78>
 8003296:	270c      	movs	r7, #12
 8003298:	42b9      	cmp	r1, r7
 800329a:	d831      	bhi.n	8003300 <_malloc_r+0x7c>
 800329c:	0030      	movs	r0, r6
 800329e:	f000 f923 	bl	80034e8 <__malloc_lock>
 80032a2:	4d32      	ldr	r5, [pc, #200]	; (800336c <_malloc_r+0xe8>)
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	001c      	movs	r4, r3
 80032a8:	2c00      	cmp	r4, #0
 80032aa:	d12e      	bne.n	800330a <_malloc_r+0x86>
 80032ac:	0039      	movs	r1, r7
 80032ae:	0030      	movs	r0, r6
 80032b0:	f7ff ffc6 	bl	8003240 <sbrk_aligned>
 80032b4:	0004      	movs	r4, r0
 80032b6:	1c43      	adds	r3, r0, #1
 80032b8:	d11e      	bne.n	80032f8 <_malloc_r+0x74>
 80032ba:	682c      	ldr	r4, [r5, #0]
 80032bc:	0025      	movs	r5, r4
 80032be:	2d00      	cmp	r5, #0
 80032c0:	d14a      	bne.n	8003358 <_malloc_r+0xd4>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	0029      	movs	r1, r5
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	0030      	movs	r0, r6
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	f000 f850 	bl	8003370 <_sbrk_r>
 80032d0:	9b01      	ldr	r3, [sp, #4]
 80032d2:	4283      	cmp	r3, r0
 80032d4:	d143      	bne.n	800335e <_malloc_r+0xda>
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	3703      	adds	r7, #3
 80032da:	1aff      	subs	r7, r7, r3
 80032dc:	2303      	movs	r3, #3
 80032de:	439f      	bics	r7, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	2f0c      	cmp	r7, #12
 80032e4:	d200      	bcs.n	80032e8 <_malloc_r+0x64>
 80032e6:	270c      	movs	r7, #12
 80032e8:	0039      	movs	r1, r7
 80032ea:	0030      	movs	r0, r6
 80032ec:	f7ff ffa8 	bl	8003240 <sbrk_aligned>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d034      	beq.n	800335e <_malloc_r+0xda>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	19df      	adds	r7, r3, r7
 80032f8:	6027      	str	r7, [r4, #0]
 80032fa:	e013      	b.n	8003324 <_malloc_r+0xa0>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	dacb      	bge.n	8003298 <_malloc_r+0x14>
 8003300:	230c      	movs	r3, #12
 8003302:	2500      	movs	r5, #0
 8003304:	6033      	str	r3, [r6, #0]
 8003306:	0028      	movs	r0, r5
 8003308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	1bd1      	subs	r1, r2, r7
 800330e:	d420      	bmi.n	8003352 <_malloc_r+0xce>
 8003310:	290b      	cmp	r1, #11
 8003312:	d917      	bls.n	8003344 <_malloc_r+0xc0>
 8003314:	19e2      	adds	r2, r4, r7
 8003316:	6027      	str	r7, [r4, #0]
 8003318:	42a3      	cmp	r3, r4
 800331a:	d111      	bne.n	8003340 <_malloc_r+0xbc>
 800331c:	602a      	str	r2, [r5, #0]
 800331e:	6863      	ldr	r3, [r4, #4]
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	6053      	str	r3, [r2, #4]
 8003324:	0030      	movs	r0, r6
 8003326:	0025      	movs	r5, r4
 8003328:	f000 f8e6 	bl	80034f8 <__malloc_unlock>
 800332c:	2207      	movs	r2, #7
 800332e:	350b      	adds	r5, #11
 8003330:	1d23      	adds	r3, r4, #4
 8003332:	4395      	bics	r5, r2
 8003334:	1aea      	subs	r2, r5, r3
 8003336:	429d      	cmp	r5, r3
 8003338:	d0e5      	beq.n	8003306 <_malloc_r+0x82>
 800333a:	1b5b      	subs	r3, r3, r5
 800333c:	50a3      	str	r3, [r4, r2]
 800333e:	e7e2      	b.n	8003306 <_malloc_r+0x82>
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e7ec      	b.n	800331e <_malloc_r+0x9a>
 8003344:	6862      	ldr	r2, [r4, #4]
 8003346:	42a3      	cmp	r3, r4
 8003348:	d101      	bne.n	800334e <_malloc_r+0xca>
 800334a:	602a      	str	r2, [r5, #0]
 800334c:	e7ea      	b.n	8003324 <_malloc_r+0xa0>
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	e7e8      	b.n	8003324 <_malloc_r+0xa0>
 8003352:	0023      	movs	r3, r4
 8003354:	6864      	ldr	r4, [r4, #4]
 8003356:	e7a7      	b.n	80032a8 <_malloc_r+0x24>
 8003358:	002c      	movs	r4, r5
 800335a:	686d      	ldr	r5, [r5, #4]
 800335c:	e7af      	b.n	80032be <_malloc_r+0x3a>
 800335e:	230c      	movs	r3, #12
 8003360:	0030      	movs	r0, r6
 8003362:	6033      	str	r3, [r6, #0]
 8003364:	f000 f8c8 	bl	80034f8 <__malloc_unlock>
 8003368:	e7cd      	b.n	8003306 <_malloc_r+0x82>
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	200001c0 	.word	0x200001c0

08003370 <_sbrk_r>:
 8003370:	2300      	movs	r3, #0
 8003372:	b570      	push	{r4, r5, r6, lr}
 8003374:	4d06      	ldr	r5, [pc, #24]	; (8003390 <_sbrk_r+0x20>)
 8003376:	0004      	movs	r4, r0
 8003378:	0008      	movs	r0, r1
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	f7fd fafe 	bl	800097c <_sbrk>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d103      	bne.n	800338c <_sbrk_r+0x1c>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d000      	beq.n	800338c <_sbrk_r+0x1c>
 800338a:	6023      	str	r3, [r4, #0]
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	200001c8 	.word	0x200001c8

08003394 <__sread>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	000c      	movs	r4, r1
 8003398:	250e      	movs	r5, #14
 800339a:	5f49      	ldrsh	r1, [r1, r5]
 800339c:	f000 f8b4 	bl	8003508 <_read_r>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	db03      	blt.n	80033ac <__sread+0x18>
 80033a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033a6:	181b      	adds	r3, r3, r0
 80033a8:	6563      	str	r3, [r4, #84]	; 0x54
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	4a02      	ldr	r2, [pc, #8]	; (80033b8 <__sread+0x24>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	81a3      	strh	r3, [r4, #12]
 80033b4:	e7f9      	b.n	80033aa <__sread+0x16>
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	ffffefff 	.word	0xffffefff

080033bc <__swrite>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	001f      	movs	r7, r3
 80033c0:	898b      	ldrh	r3, [r1, #12]
 80033c2:	0005      	movs	r5, r0
 80033c4:	000c      	movs	r4, r1
 80033c6:	0016      	movs	r6, r2
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	d505      	bpl.n	80033d8 <__swrite+0x1c>
 80033cc:	230e      	movs	r3, #14
 80033ce:	5ec9      	ldrsh	r1, [r1, r3]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2302      	movs	r3, #2
 80033d4:	f000 f874 	bl	80034c0 <_lseek_r>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <__swrite+0x34>)
 80033dc:	0028      	movs	r0, r5
 80033de:	4013      	ands	r3, r2
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	0032      	movs	r2, r6
 80033e4:	230e      	movs	r3, #14
 80033e6:	5ee1      	ldrsh	r1, [r4, r3]
 80033e8:	003b      	movs	r3, r7
 80033ea:	f000 f81f 	bl	800342c <_write_r>
 80033ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f0:	ffffefff 	.word	0xffffefff

080033f4 <__sseek>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	000c      	movs	r4, r1
 80033f8:	250e      	movs	r5, #14
 80033fa:	5f49      	ldrsh	r1, [r1, r5]
 80033fc:	f000 f860 	bl	80034c0 <_lseek_r>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	1c42      	adds	r2, r0, #1
 8003404:	d103      	bne.n	800340e <__sseek+0x1a>
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <__sseek+0x28>)
 8003408:	4013      	ands	r3, r2
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	bd70      	pop	{r4, r5, r6, pc}
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	0152      	lsls	r2, r2, #5
 8003412:	4313      	orrs	r3, r2
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	6560      	str	r0, [r4, #84]	; 0x54
 8003418:	e7f8      	b.n	800340c <__sseek+0x18>
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	ffffefff 	.word	0xffffefff

08003420 <__sclose>:
 8003420:	b510      	push	{r4, lr}
 8003422:	230e      	movs	r3, #14
 8003424:	5ec9      	ldrsh	r1, [r1, r3]
 8003426:	f000 f815 	bl	8003454 <_close_r>
 800342a:	bd10      	pop	{r4, pc}

0800342c <_write_r>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	0004      	movs	r4, r0
 8003430:	0008      	movs	r0, r1
 8003432:	0011      	movs	r1, r2
 8003434:	001a      	movs	r2, r3
 8003436:	2300      	movs	r3, #0
 8003438:	4d05      	ldr	r5, [pc, #20]	; (8003450 <_write_r+0x24>)
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	f7fd fa56 	bl	80008ec <_write>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d103      	bne.n	800344c <_write_r+0x20>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d000      	beq.n	800344c <_write_r+0x20>
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	bd70      	pop	{r4, r5, r6, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	200001c8 	.word	0x200001c8

08003454 <_close_r>:
 8003454:	2300      	movs	r3, #0
 8003456:	b570      	push	{r4, r5, r6, lr}
 8003458:	4d06      	ldr	r5, [pc, #24]	; (8003474 <_close_r+0x20>)
 800345a:	0004      	movs	r4, r0
 800345c:	0008      	movs	r0, r1
 800345e:	602b      	str	r3, [r5, #0]
 8003460:	f7fd fa60 	bl	8000924 <_close>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d103      	bne.n	8003470 <_close_r+0x1c>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d000      	beq.n	8003470 <_close_r+0x1c>
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	200001c8 	.word	0x200001c8

08003478 <_fstat_r>:
 8003478:	2300      	movs	r3, #0
 800347a:	b570      	push	{r4, r5, r6, lr}
 800347c:	4d06      	ldr	r5, [pc, #24]	; (8003498 <_fstat_r+0x20>)
 800347e:	0004      	movs	r4, r0
 8003480:	0008      	movs	r0, r1
 8003482:	0011      	movs	r1, r2
 8003484:	602b      	str	r3, [r5, #0]
 8003486:	f7fd fa57 	bl	8000938 <_fstat>
 800348a:	1c43      	adds	r3, r0, #1
 800348c:	d103      	bne.n	8003496 <_fstat_r+0x1e>
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d000      	beq.n	8003496 <_fstat_r+0x1e>
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	bd70      	pop	{r4, r5, r6, pc}
 8003498:	200001c8 	.word	0x200001c8

0800349c <_isatty_r>:
 800349c:	2300      	movs	r3, #0
 800349e:	b570      	push	{r4, r5, r6, lr}
 80034a0:	4d06      	ldr	r5, [pc, #24]	; (80034bc <_isatty_r+0x20>)
 80034a2:	0004      	movs	r4, r0
 80034a4:	0008      	movs	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd fa54 	bl	8000954 <_isatty>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d103      	bne.n	80034b8 <_isatty_r+0x1c>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d000      	beq.n	80034b8 <_isatty_r+0x1c>
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	200001c8 	.word	0x200001c8

080034c0 <_lseek_r>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	0004      	movs	r4, r0
 80034c4:	0008      	movs	r0, r1
 80034c6:	0011      	movs	r1, r2
 80034c8:	001a      	movs	r2, r3
 80034ca:	2300      	movs	r3, #0
 80034cc:	4d05      	ldr	r5, [pc, #20]	; (80034e4 <_lseek_r+0x24>)
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	f7fd fa49 	bl	8000966 <_lseek>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d103      	bne.n	80034e0 <_lseek_r+0x20>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d000      	beq.n	80034e0 <_lseek_r+0x20>
 80034de:	6023      	str	r3, [r4, #0]
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	200001c8 	.word	0x200001c8

080034e8 <__malloc_lock>:
 80034e8:	b510      	push	{r4, lr}
 80034ea:	4802      	ldr	r0, [pc, #8]	; (80034f4 <__malloc_lock+0xc>)
 80034ec:	f7ff fdef 	bl	80030ce <__retarget_lock_acquire_recursive>
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	200001bc 	.word	0x200001bc

080034f8 <__malloc_unlock>:
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4802      	ldr	r0, [pc, #8]	; (8003504 <__malloc_unlock+0xc>)
 80034fc:	f7ff fde8 	bl	80030d0 <__retarget_lock_release_recursive>
 8003500:	bd10      	pop	{r4, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	200001bc 	.word	0x200001bc

08003508 <_read_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	0004      	movs	r4, r0
 800350c:	0008      	movs	r0, r1
 800350e:	0011      	movs	r1, r2
 8003510:	001a      	movs	r2, r3
 8003512:	2300      	movs	r3, #0
 8003514:	4d05      	ldr	r5, [pc, #20]	; (800352c <_read_r+0x24>)
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	f7fd f9cb 	bl	80008b2 <_read>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d103      	bne.n	8003528 <_read_r+0x20>
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d000      	beq.n	8003528 <_read_r+0x20>
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	200001c8 	.word	0x200001c8

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
